"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./node_modules/@dfinity/agent/lib/esm/actor.js":
/*!******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/actor.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTOR_METHOD_WITH_HTTP_DETAILS: function() { return /* binding */ ACTOR_METHOD_WITH_HTTP_DETAILS; },\n/* harmony export */   Actor: function() { return /* binding */ Actor; },\n/* harmony export */   ActorCallError: function() { return /* binding */ ActorCallError; },\n/* harmony export */   QueryCallRejectedError: function() { return /* binding */ QueryCallRejectedError; },\n/* harmony export */   UpdateCallRejectedError: function() { return /* binding */ UpdateCallRejectedError; },\n/* harmony export */   getManagementCanister: function() { return /* binding */ getManagementCanister; }\n/* harmony export */ });\n/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ \"./node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"./node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ \"./node_modules/@dfinity/candid/lib/esm/index.js\");\n/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polling */ \"./node_modules/@dfinity/agent/lib/esm/polling/index.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/principal */ \"./node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/buffer */ \"./node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _canisters_management_idl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./canisters/management_idl */ \"./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js\");\n\n\n\n\n\n\n\n\nclass ActorCallError extends _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError {\n    constructor(canisterId, methodName, type, props) {\n        super([\n            `Call failed:`,\n            `  Canister: ${canisterId.toText()}`,\n            `  Method: ${methodName} (${type})`,\n            ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`),\n        ].join('\\n'));\n        this.canisterId = canisterId;\n        this.methodName = methodName;\n        this.type = type;\n        this.props = props;\n    }\n}\nclass QueryCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, result) {\n        var _a;\n        super(canisterId, methodName, 'query', {\n            Status: result.status,\n            Code: (_a = _agent__WEBPACK_IMPORTED_MODULE_1__.ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code \"${result.reject_code}\"`,\n            Message: result.reject_message,\n        });\n        this.result = result;\n    }\n}\nclass UpdateCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, requestId, response) {\n        super(canisterId, methodName, 'update', Object.assign({ 'Request ID': (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_6__.toHex)(requestId) }, (response.body\n            ? Object.assign(Object.assign({}, (response.body.error_code\n                ? {\n                    'Error code': response.body.error_code,\n                }\n                : {})), { 'Reject code': String(response.body.reject_code), 'Reject message': response.body.reject_message }) : {\n            'HTTP status code': response.status.toString(),\n            'HTTP status text': response.statusText,\n        })));\n        this.requestId = requestId;\n        this.response = response;\n    }\n}\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nclass Actor {\n    constructor(metadata) {\n        this[metadataSymbol] = Object.freeze(metadata);\n    }\n    /**\n     * Get the Agent class this Actor would call, or undefined if the Actor would use\n     * the default agent (global.ic.agent).\n     * @param actor The actor to get the agent of.\n     */\n    static agentOf(actor) {\n        return actor[metadataSymbol].config.agent;\n    }\n    /**\n     * Get the interface of an actor, in the form of an instance of a Service.\n     * @param actor The actor to get the interface of.\n     */\n    static interfaceOf(actor) {\n        return actor[metadataSymbol].service;\n    }\n    static canisterIdOf(actor) {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(actor[metadataSymbol].config.canisterId);\n    }\n    static async install(fields, config) {\n        const mode = fields.mode === undefined ? { install: null } : fields.mode;\n        // Need to transform the arg into a number array.\n        const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];\n        // Same for module.\n        const wasmModule = [...new Uint8Array(fields.module)];\n        const canisterId = typeof config.canisterId === 'string'\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromText(config.canisterId)\n            : config.canisterId;\n        await getManagementCanister(config).install_code({\n            mode,\n            arg,\n            wasm_module: wasmModule,\n            canister_id: canisterId,\n            sender_canister_version: [],\n        });\n    }\n    static async createCanister(config, settings) {\n        function settingsToCanisterSettings(settings) {\n            return [\n                {\n                    controllers: settings.controllers ? [settings.controllers] : [],\n                    compute_allocation: settings.compute_allocation ? [settings.compute_allocation] : [],\n                    freezing_threshold: settings.freezing_threshold ? [settings.freezing_threshold] : [],\n                    memory_allocation: settings.memory_allocation ? [settings.memory_allocation] : [],\n                    reserved_cycles_limit: [],\n                    log_visibility: [],\n                    wasm_memory_limit: [],\n                },\n            ];\n        }\n        const { canister_id: canisterId } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({\n            amount: [],\n            settings: settingsToCanisterSettings(settings || {}),\n            specified_id: [],\n            sender_canister_version: [],\n        });\n        return canisterId;\n    }\n    static async createAndInstallCanister(interfaceFactory, fields, config) {\n        const canisterId = await this.createCanister(config);\n        await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId }));\n        return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId }));\n    }\n    static createActorClass(interfaceFactory, options) {\n        const service = interfaceFactory({ IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL });\n        class CanisterActor extends Actor {\n            constructor(config) {\n                if (!config.canisterId)\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError(`Canister ID is required, but received ${typeof config.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n                const canisterId = typeof config.canisterId === 'string'\n                    ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromText(config.canisterId)\n                    : config.canisterId;\n                super({\n                    config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId }),\n                    service,\n                });\n                for (const [methodName, func] of service._fields) {\n                    if (options === null || options === void 0 ? void 0 : options.httpDetails) {\n                        func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n                    }\n                    this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n                }\n            }\n        }\n        return CanisterActor;\n    }\n    static createActor(interfaceFactory, configuration) {\n        if (!configuration.canisterId) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError(`Canister ID is required, but received ${typeof configuration.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n        }\n        return new (this.createActorClass(interfaceFactory))(configuration);\n    }\n    static createActorWithHttpDetails(interfaceFactory, configuration) {\n        return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(configuration);\n    }\n}\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types, msg) {\n    const returnValues = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.decode(types, buffer___WEBPACK_IMPORTED_MODULE_0__.Buffer.from(msg));\n    switch (returnValues.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return returnValues[0];\n        default:\n            return returnValues;\n    }\n}\nconst DEFAULT_ACTOR_CONFIG = {\n    pollingStrategyFactory: _polling__WEBPACK_IMPORTED_MODULE_4__.strategy.defaultStrategy,\n};\nconst ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\nfunction _createActorMethod(actor, methodName, func, blsVerify) {\n    let caller;\n    if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || (0,_agent__WEBPACK_IMPORTED_MODULE_1__.getDefaultAgent)();\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.encode(func.argTypes, args);\n            const result = await agent.query(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: options.effectiveCanisterId,\n            });\n            switch (result.status) {\n                case \"rejected\" /* QueryResponseStatus.Rejected */:\n                    throw new QueryCallRejectedError(cid, methodName, result);\n                case \"replied\" /* QueryResponseStatus.Replied */:\n                    return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n                        ? {\n                            httpDetails: result.httpDetails,\n                            result: decodeReturnValue(func.retTypes, result.reply.arg),\n                        }\n                        : decodeReturnValue(func.retTypes, result.reply.arg);\n            }\n        };\n    }\n    else {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || (0,_agent__WEBPACK_IMPORTED_MODULE_1__.getDefaultAgent)();\n            const { canisterId, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n            const ecid = effectiveCanisterId !== undefined ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(effectiveCanisterId) : cid;\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.encode(func.argTypes, args);\n            const { requestId, response } = await agent.call(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: ecid,\n            });\n            if (!response.ok || response.body /* IC-1462 */) {\n                throw new UpdateCallRejectedError(cid, methodName, requestId, response);\n            }\n            const pollStrategy = pollingStrategyFactory();\n            const responseBytes = await (0,_polling__WEBPACK_IMPORTED_MODULE_4__.pollForResponse)(agent, ecid, requestId, pollStrategy, blsVerify);\n            const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n            if (responseBytes !== undefined) {\n                return shouldIncludeHttpDetails\n                    ? {\n                        httpDetails: response,\n                        result: decodeReturnValue(func.retTypes, responseBytes),\n                    }\n                    : decodeReturnValue(func.retTypes, responseBytes);\n            }\n            else if (func.retTypes.length === 0) {\n                return shouldIncludeHttpDetails\n                    ? {\n                        httpDetails: response,\n                        result: undefined,\n                    }\n                    : undefined;\n            }\n            else {\n                throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);\n            }\n        };\n    }\n    const handler = (...args) => caller({}, ...args);\n    handler.withOptions =\n        (options) => (...args) => caller(options, ...args);\n    return handler;\n}\n/**\n * Create a management canister actor\n * @param config - a CallConfig\n */\nfunction getManagementCanister(config) {\n    function transform(_methodName, args) {\n        if (config.effectiveCanisterId) {\n            return { effectiveCanisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(config.effectiveCanisterId) };\n        }\n        const first = args[0];\n        let effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromHex('');\n        if (first && typeof first === 'object' && first.canister_id) {\n            effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(first.canister_id);\n        }\n        return { effectiveCanisterId };\n    }\n    return Actor.createActor(_canisters_management_idl__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign(Object.assign(Object.assign({}, config), { canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromHex('') }), {\n        callTransform: transform,\n        queryTransform: transform,\n    }));\n}\n//# sourceMappingURL=actor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/actor.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/http/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/http/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpAgent: function() { return /* binding */ HttpAgent; },\n/* harmony export */   IC_ROOT_KEY: function() { return /* binding */ IC_ROOT_KEY; },\n/* harmony export */   IdentityInvalidError: function() { return /* binding */ IdentityInvalidError; },\n/* harmony export */   MANAGEMENT_CANISTER_ID: function() { return /* binding */ MANAGEMENT_CANISTER_ID; },\n/* harmony export */   RequestStatusResponseStatus: function() { return /* binding */ RequestStatusResponseStatus; },\n/* harmony export */   makeNonce: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_7__.makeNonce; }\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"./node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors */ \"./node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../auth */ \"./node_modules/@dfinity/agent/lib/esm/auth.js\");\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../cbor */ \"./node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../request_id */ \"./node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/buffer */ \"./node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _transforms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transforms */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/errors.js\");\n/* harmony import */ var _canisterStatus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../canisterStatus */ \"./node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../certificate */ \"./node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"./node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _utils_expirableMap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/expirableMap */ \"./node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js\");\n/* harmony import */ var _public_key__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../public_key */ \"./node_modules/@dfinity/agent/lib/esm/public_key.js\");\n/* harmony import */ var _utils_leb__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utils/leb */ \"./node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../observable */ \"./node_modules/@dfinity/agent/lib/esm/observable.js\");\n/* harmony import */ var _polling_backoff__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../polling/backoff */ \"./node_modules/@dfinity/agent/lib/esm/polling/backoff.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _transforms__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"makeNonce\",\"RequestStatusResponseStatus\",\"IC_ROOT_KEY\",\"MANAGEMENT_CANISTER_ID\",\"IdentityInvalidError\",\"HttpAgent\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _transforms__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HttpAgent_instances, _HttpAgent_retryTimes, _HttpAgent_backoffStrategy, _HttpAgent_waterMark, _HttpAgent_queryPipeline, _HttpAgent_updatePipeline, _HttpAgent_subnetKeys, _HttpAgent_verifyQuerySignatures, _HttpAgent_requestAndRetryQuery, _HttpAgent_requestAndRetry, _HttpAgent_verifyQueryResponse;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n    RequestStatusResponseStatus[\"Received\"] = \"received\";\n    RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n    RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n    RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n    RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n    RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n    'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n    '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n    'b01291091c5f87b98883463f98091a0baaae';\nconst MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\nclass HttpDefaultFetchError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n    }\n}\nclass IdentityInvalidError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n    }\n}\nfunction getDefaultFetch() {\n    let defaultFetch;\n    if (typeof window !== 'undefined') {\n        // Browser context\n        if (window.fetch) {\n            defaultFetch = window.fetch.bind(window);\n        }\n        else {\n            throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.');\n        }\n    }\n    else if (typeof __webpack_require__.g !== 'undefined') {\n        // Node context\n        if (__webpack_require__.g.fetch) {\n            defaultFetch = __webpack_require__.g.fetch.bind(__webpack_require__.g);\n        }\n        else {\n            throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.');\n        }\n    }\n    else if (typeof self !== 'undefined') {\n        if (self.fetch) {\n            defaultFetch = self.fetch.bind(self);\n        }\n    }\n    if (defaultFetch) {\n        return defaultFetch;\n    }\n    throw new HttpDefaultFetchError('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.');\n}\n// A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\nclass HttpAgent {\n    constructor(options = {}) {\n        var _a;\n        _HttpAgent_instances.add(this);\n        this.rootKey = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.fromHex)(IC_ROOT_KEY);\n        this._timeDiffMsecs = 0;\n        this._rootKeyFetched = false;\n        _HttpAgent_retryTimes.set(this, void 0); // Retry requests N times before erroring by default\n        _HttpAgent_backoffStrategy.set(this, void 0);\n        this._isAgent = true;\n        // The UTC time in milliseconds when the latest request was made\n        _HttpAgent_waterMark.set(this, 0);\n        this.log = new _observable__WEBPACK_IMPORTED_MODULE_14__.ObservableLog();\n        _HttpAgent_queryPipeline.set(this, []);\n        _HttpAgent_updatePipeline.set(this, []);\n        _HttpAgent_subnetKeys.set(this, new _utils_expirableMap__WEBPACK_IMPORTED_MODULE_11__.ExpirableMap({\n            expirationTime: 5 * 60 * 1000, // 5 minutes\n        }));\n        _HttpAgent_verifyQuerySignatures.set(this, true);\n        /**\n         * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n         * @param queryResponse - The response from the query\n         * @param subnetStatus - The subnet status, including all node keys\n         * @returns ApiQueryResponse\n         */\n        _HttpAgent_verifyQueryResponse.set(this, (queryResponse, subnetStatus) => {\n            if (__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\") === false) {\n                // This should not be called if the user has disabled verification\n                return queryResponse;\n            }\n            if (!subnetStatus) {\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n            }\n            const { status, signatures = [], requestId } = queryResponse;\n            const domainSeparator = new TextEncoder().encode('\\x0Bic-response');\n            for (const sig of signatures) {\n                const { timestamp, identity } = sig;\n                const nodeId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(identity).toText();\n                let hash;\n                // Hash is constructed differently depending on the status\n                if (status === 'replied') {\n                    const { reply } = queryResponse;\n                    hash = (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.hashOfMap)({\n                        status: status,\n                        reply: reply,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else if (status === 'rejected') {\n                    const { reject_code, reject_message, error_code } = queryResponse;\n                    hash = (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.hashOfMap)({\n                        status: status,\n                        reject_code: reject_code,\n                        reject_message: reject_message,\n                        error_code: error_code,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else {\n                    throw new Error(`Unknown status: ${status}`);\n                }\n                const separatorWithHash = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.concat)(domainSeparator, new Uint8Array(hash));\n                // FIX: check for match without verifying N times\n                const pubKey = subnetStatus === null || subnetStatus === void 0 ? void 0 : subnetStatus.nodeKeys.get(nodeId);\n                if (!pubKey) {\n                    throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n                }\n                const rawKey = _public_key__WEBPACK_IMPORTED_MODULE_12__.Ed25519PublicKey.fromDer(pubKey).rawKey;\n                const valid = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_16__.ed25519.verify(sig.signature, new Uint8Array(separatorWithHash), new Uint8Array(rawKey));\n                if (valid)\n                    return queryResponse;\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError(`Invalid signature from replica ${nodeId} signed query.`);\n            }\n            return queryResponse;\n        });\n        if (options.source) {\n            if (!(options.source instanceof HttpAgent)) {\n                throw new Error(\"An Agent's source can only be another HttpAgent\");\n            }\n            this._identity = options.source._identity;\n            this._fetch = options.source._fetch;\n            this._host = options.source._host;\n            this._credentials = options.source._credentials;\n        }\n        else {\n            this._fetch = options.fetch || getDefaultFetch() || fetch.bind(__webpack_require__.g);\n            this._fetchOptions = options.fetchOptions;\n            this._callOptions = options.callOptions;\n        }\n        if (options.host !== undefined) {\n            if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n                this._host = new URL(window.location.protocol + '//' + options.host);\n            }\n            else {\n                this._host = new URL(options.host);\n            }\n        }\n        else if (options.source !== undefined) {\n            // Safe to ignore here.\n            this._host = options.source._host;\n        }\n        else {\n            const location = typeof window !== 'undefined' ? window.location : undefined;\n            if (!location) {\n                this._host = new URL('https://icp-api.io');\n                this.log.warn('Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.');\n            }\n            // Mainnet, local, and remote environments will have the api route available\n            const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n            const remoteHosts = ['.github.dev', '.gitpod.io'];\n            const hostname = location === null || location === void 0 ? void 0 : location.hostname;\n            let knownHost;\n            if (hostname && typeof hostname === 'string') {\n                if (remoteHosts.some(host => hostname.endsWith(host))) {\n                    knownHost = hostname;\n                }\n                else {\n                    knownHost = knownHosts.find(host => hostname.endsWith(host));\n                }\n            }\n            if (location && knownHost) {\n                // If the user is on a boundary-node provided host, we can use the same host for the agent\n                this._host = new URL(`${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`);\n            }\n            else {\n                this._host = new URL('https://icp-api.io');\n                this.log.warn('Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.');\n            }\n        }\n        if (options.verifyQuerySignatures !== undefined) {\n            __classPrivateFieldSet(this, _HttpAgent_verifyQuerySignatures, options.verifyQuerySignatures, \"f\");\n        }\n        // Default is 3\n        __classPrivateFieldSet(this, _HttpAgent_retryTimes, (_a = options.retryTimes) !== null && _a !== void 0 ? _a : 3, \"f\");\n        // Delay strategy for retries. Default is exponential backoff\n        const defaultBackoffFactory = () => new _polling_backoff__WEBPACK_IMPORTED_MODULE_15__.ExponentialBackoff({\n            maxIterations: __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\"),\n        });\n        __classPrivateFieldSet(this, _HttpAgent_backoffStrategy, options.backoffStrategy || defaultBackoffFactory, \"f\");\n        // Rewrite to avoid redirects\n        if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n            this._host.hostname = IC0_DOMAIN;\n        }\n        else if (this._host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n            this._host.hostname = ICP0_DOMAIN;\n        }\n        else if (this._host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n            this._host.hostname = ICP_API_DOMAIN;\n        }\n        if (options.credentials) {\n            const { name, password } = options.credentials;\n            this._credentials = `${name}${password ? ':' + password : ''}`;\n        }\n        this._identity = Promise.resolve(options.identity || new _auth__WEBPACK_IMPORTED_MODULE_2__.AnonymousIdentity());\n        // Add a nonce transform to ensure calls are unique\n        this.addTransform('update', (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.makeNonceTransform)(_types__WEBPACK_IMPORTED_MODULE_7__.makeNonce));\n        if (options.useQueryNonces) {\n            this.addTransform('query', (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.makeNonceTransform)(_types__WEBPACK_IMPORTED_MODULE_7__.makeNonce));\n        }\n        if (options.logToConsole) {\n            this.log.subscribe(log => {\n                if (log.level === 'error') {\n                    console.error(log.message);\n                }\n                else if (log.level === 'warn') {\n                    console.warn(log.message);\n                }\n                else {\n                    console.log(log.message);\n                }\n            });\n        }\n    }\n    get waterMark() {\n        return __classPrivateFieldGet(this, _HttpAgent_waterMark, \"f\");\n    }\n    isLocal() {\n        const hostname = this._host.hostname;\n        return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n    }\n    addTransform(type, fn, priority = fn.priority || 0) {\n        if (type === 'update') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n            __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").length, 0, Object.assign(fn, { priority }));\n        }\n        else if (type === 'query') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n            __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").length, 0, Object.assign(fn, { priority }));\n        }\n    }\n    async getPrincipal() {\n        if (!this._identity) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        return (await this._identity).getPrincipal();\n    }\n    async call(canisterId, options, identity) {\n        const id = await (identity !== undefined ? await identity : await this._identity);\n        if (!id) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        const ecid = options.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(options.effectiveCanisterId)\n            : canister;\n        const sender = id.getPrincipal() || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n        let ingress_expiry = new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n        // If the value is off by more than 30 seconds, reconcile system time with the network\n        if (Math.abs(this._timeDiffMsecs) > 1000 * 30) {\n            ingress_expiry = new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);\n        }\n        const submit = {\n            request_type: _types__WEBPACK_IMPORTED_MODULE_7__.SubmitRequestType.Call,\n            canister_id: canister,\n            method_name: options.methodName,\n            arg: options.arg,\n            sender,\n            ingress_expiry,\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let transformedRequest = (await this._transform({\n            request: {\n                body: null,\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n            },\n            endpoint: \"call\" /* Endpoint.Call */,\n            body: submit,\n        }));\n        // Apply transform for identity.\n        transformedRequest = await id.transformRequest(transformedRequest);\n        const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(transformedRequest.body);\n        this.log.print(`fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n        // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n        // calculate the requestId locally.\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const request = __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n            request: () => this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign(Object.assign({}, this._callOptions), transformedRequest.request), { body })),\n            backoff,\n            tries: 0,\n        });\n        const [response, requestId] = await Promise.all([request, (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.requestIdOf)(submit)]);\n        const responseBuffer = await response.arrayBuffer();\n        const responseBody = (response.status === 200 && responseBuffer.byteLength > 0 ? _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(responseBuffer) : null);\n        return {\n            requestId,\n            response: {\n                ok: response.ok,\n                status: response.status,\n                statusText: response.statusText,\n                body: responseBody,\n                headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(response.headers),\n            },\n        };\n    }\n    async query(canisterId, fields, identity) {\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const ecid = fields.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(fields.effectiveCanisterId)\n            : _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        this.log.print(`ecid ${ecid.toString()}`);\n        this.log.print(`canisterId ${canisterId.toString()}`);\n        const makeQuery = async () => {\n            const id = await (identity !== undefined ? await identity : await this._identity);\n            if (!id) {\n                throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n            }\n            const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n            const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n            const request = {\n                request_type: \"query\" /* ReadRequestType.Query */,\n                canister_id: canister,\n                method_name: fields.methodName,\n                arg: fields.arg,\n                sender,\n                ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n            };\n            const requestId = await (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.requestIdOf)(request);\n            // TODO: remove this any. This can be a Signed or UnSigned request.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let transformedRequest = await this._transform({\n                request: {\n                    method: 'POST',\n                    headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n                },\n                endpoint: \"read\" /* Endpoint.Query */,\n                body: request,\n            });\n            // Apply transform for identity.\n            transformedRequest = (await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest)));\n            const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(transformedRequest.body);\n            const args = {\n                canister: canister.toText(),\n                ecid,\n                transformedRequest,\n                body,\n                requestId,\n                backoff,\n                tries: 0,\n            };\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, args);\n        };\n        const getSubnetStatus = async () => {\n            if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n                return undefined;\n            }\n            const subnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n            if (subnetStatus) {\n                return subnetStatus;\n            }\n            await this.fetchSubnetKeys(ecid.toString());\n            return __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n        };\n        // Attempt to make the query i=retryTimes times\n        // Make query and fetch subnet keys in parallel\n        const [query, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n        this.log.print('Query response:', query);\n        // Skip verification if the user has disabled it\n        if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n            return query;\n        }\n        try {\n            return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, query, subnetStatus);\n        }\n        catch (_) {\n            // In case the node signatures have changed, refresh the subnet keys and try again\n            this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n            __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").delete(canisterId.toString());\n            await this.fetchSubnetKeys(ecid.toString());\n            const updatedSubnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(canisterId.toString());\n            if (!updatedSubnetStatus) {\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n            }\n            return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, query, updatedSubnetStatus);\n        }\n    }\n    async createReadStateRequest(fields, identity) {\n        const id = await (identity !== undefined ? await identity : await this._identity);\n        if (!id) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n        // TODO: remove this any. This can be a Signed or UnSigned request.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {})),\n            },\n            endpoint: \"read_state\" /* Endpoint.ReadState */,\n            body: {\n                request_type: \"read_state\" /* ReadRequestType.ReadState */,\n                paths: fields.paths,\n                sender,\n                ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n            },\n        });\n        // Apply transform for identity.\n        return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);\n    }\n    async readState(canisterId, fields, identity, \n    // eslint-disable-next-line\n    request) {\n        const canister = typeof canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(canisterId) : canisterId;\n        const transformedRequest = request !== null && request !== void 0 ? request : (await this.createReadStateRequest(fields, identity));\n        const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(transformedRequest.body);\n        this.log.print(`fetching \"/api/v2/canister/${canister}/read_state\" with request:`, transformedRequest);\n        // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n            request: () => this._fetch('' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body })),\n            backoff,\n            tries: 0,\n        });\n        if (!response.ok) {\n            throw new Error(`Server returned an error:\\n` +\n                `  Code: ${response.status} (${response.statusText})\\n` +\n                `  Body: ${await response.text()}\\n`);\n        }\n        const decodedResponse = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await response.arrayBuffer());\n        this.log.print('Read state response:', decodedResponse);\n        const parsedTime = await this.parseTimeFromResponse(decodedResponse);\n        if (parsedTime > 0) {\n            this.log.print('Read state response time:', parsedTime);\n            __classPrivateFieldSet(this, _HttpAgent_waterMark, parsedTime, \"f\");\n        }\n        return decodedResponse;\n    }\n    async parseTimeFromResponse(response) {\n        let tree;\n        if (response.certificate) {\n            const decoded = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(response.certificate);\n            if (decoded && 'tree' in decoded) {\n                tree = decoded.tree;\n            }\n            else {\n                throw new Error('Could not decode time from response');\n            }\n            const timeLookup = (0,_certificate__WEBPACK_IMPORTED_MODULE_10__.lookup_path)(['time'], tree);\n            if (timeLookup.status !== _certificate__WEBPACK_IMPORTED_MODULE_10__.LookupStatus.Found) {\n                throw new Error('Time was not found in the response or was not in its expected format.');\n            }\n            if (!(timeLookup.value instanceof ArrayBuffer) && !ArrayBuffer.isView(timeLookup)) {\n                throw new Error('Time was not found in the response or was not in its expected format.');\n            }\n            const date = (0,_utils_leb__WEBPACK_IMPORTED_MODULE_13__.decodeTime)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.bufFromBufLike)(timeLookup.value));\n            this.log.print('Time from response:', date);\n            this.log.print('Time from response in milliseconds:', Number(date));\n            return Number(date);\n        }\n        else {\n            this.log.warn('No certificate found in response');\n        }\n        return 0;\n    }\n    /**\n     * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n     * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n     */\n    async syncTime(canisterId) {\n        const CanisterStatus = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../canisterStatus */ \"./node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\"));\n        const callTime = Date.now();\n        try {\n            if (!canisterId) {\n                this.log.print('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');\n            }\n            const status = await CanisterStatus.request({\n                // Fall back with canisterId of the ICP Ledger\n                canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n                agent: this,\n                paths: ['time'],\n            });\n            const replicaTime = status.get('time');\n            if (replicaTime) {\n                this._timeDiffMsecs = Number(replicaTime) - Number(callTime);\n            }\n        }\n        catch (error) {\n            this.log.error('Caught exception while attempting to sync time', error);\n        }\n    }\n    async status() {\n        const headers = this._credentials\n            ? {\n                Authorization: 'Basic ' + btoa(this._credentials),\n            }\n            : {};\n        this.log.print(`fetching \"/api/v2/status\"`);\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n            backoff,\n            request: () => this._fetch('' + new URL(`/api/v2/status`, this._host), Object.assign({ headers }, this._fetchOptions)),\n            tries: 0,\n        });\n        return _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await response.arrayBuffer());\n    }\n    async fetchRootKey() {\n        if (!this._rootKeyFetched) {\n            // Hex-encoded version of the replica root key\n            this.rootKey = (await this.status()).root_key;\n            this._rootKeyFetched = true;\n        }\n        return this.rootKey;\n    }\n    invalidateIdentity() {\n        this._identity = null;\n    }\n    replaceIdentity(identity) {\n        this._identity = Promise.resolve(identity);\n    }\n    async fetchSubnetKeys(canisterId) {\n        const effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        const response = await (0,_canisterStatus__WEBPACK_IMPORTED_MODULE_9__.request)({\n            canisterId: effectiveCanisterId,\n            paths: ['subnet'],\n            agent: this,\n        });\n        const subnetResponse = response.get('subnet');\n        if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n            __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").set(effectiveCanisterId.toText(), subnetResponse);\n            return subnetResponse;\n        }\n        // If the subnet status is not returned, return undefined\n        return undefined;\n    }\n    _transform(request) {\n        let p = Promise.resolve(request);\n        if (request.endpoint === \"call\" /* Endpoint.Call */) {\n            for (const fn of __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\")) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        else {\n            for (const fn of __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\")) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        return p;\n    }\n}\n_HttpAgent_retryTimes = new WeakMap(), _HttpAgent_backoffStrategy = new WeakMap(), _HttpAgent_waterMark = new WeakMap(), _HttpAgent_queryPipeline = new WeakMap(), _HttpAgent_updatePipeline = new WeakMap(), _HttpAgent_subnetKeys = new WeakMap(), _HttpAgent_verifyQuerySignatures = new WeakMap(), _HttpAgent_verifyQueryResponse = new WeakMap(), _HttpAgent_instances = new WeakSet(), _HttpAgent_requestAndRetryQuery = async function _HttpAgent_requestAndRetryQuery(args) {\n    var _a, _b;\n    const { ecid, transformedRequest, body, requestId, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n    this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n        tries,\n        backoff,\n        delay,\n    });\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n    }\n    if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response;\n    // Make the request and retry if it throws an error\n    try {\n        this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`, transformedRequest);\n        const fetchResponse = await this._fetch('' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this._host), Object.assign(Object.assign(Object.assign({}, this._fetchOptions), transformedRequest.request), { body }));\n        if (fetchResponse.status === 200) {\n            const queryResponse = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await fetchResponse.arrayBuffer());\n            response = Object.assign(Object.assign({}, queryResponse), { httpDetails: {\n                    ok: fetchResponse.ok,\n                    status: fetchResponse.status,\n                    statusText: fetchResponse.statusText,\n                    headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(fetchResponse.headers),\n                }, requestId });\n        }\n        else {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_8__.AgentHTTPResponseError(`Gateway returned an error:\\n` +\n                `  Code: ${fetchResponse.status} (${fetchResponse.statusText})\\n` +\n                `  Body: ${await fetchResponse.text()}\\n`, {\n                ok: fetchResponse.ok,\n                status: fetchResponse.status,\n                statusText: fetchResponse.statusText,\n                headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(fetchResponse.headers),\n            });\n        }\n    }\n    catch (error) {\n        if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n            this.log.warn(`Caught exception while attempting to make query:\\n` +\n                `  ${error}\\n` +\n                `  Retrying query.`);\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), { tries: tries + 1 }));\n        }\n        throw error;\n    }\n    const timestamp = (_b = (_a = response.signatures) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.timestamp;\n    // Skip watermark verification if the user has set verifyQuerySignatures to false\n    if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n        return response;\n    }\n    if (!timestamp) {\n        throw new Error('Timestamp not found in query response. This suggests a malformed or malicious response.');\n    }\n    // Convert the timestamp to milliseconds\n    const timeStampInMs = Number(BigInt(timestamp) / BigInt(1000000));\n    this.log.print('watermark and timestamp', {\n        waterMark: this.waterMark,\n        timestamp: timeStampInMs,\n    });\n    // If the timestamp is less than the watermark, retry the request up to the retry limit\n    if (Number(this.waterMark) > timeStampInMs) {\n        const error = new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError('Timestamp is below the watermark. Retrying query.');\n        this.log.error('Timestamp is below', error, {\n            timestamp,\n            waterMark: this.waterMark,\n        });\n        if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), { tries: tries + 1 }));\n        }\n        {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n        }\n    }\n    return response;\n}, _HttpAgent_requestAndRetry = async function _HttpAgent_requestAndRetry(args) {\n    const { request, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n    }\n    if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response;\n    try {\n        response = await request();\n    }\n    catch (error) {\n        if (__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\") > tries) {\n            this.log.warn(`Caught exception while attempting to make request:\\n` +\n                `  ${error}\\n` +\n                `  Retrying request.`);\n            // Delay the request by the configured backoff strategy\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, { request, backoff, tries: tries + 1 });\n        }\n        throw error;\n    }\n    if (response.ok) {\n        return response;\n    }\n    const responseText = await response.clone().text();\n    const errorMessage = `Server returned an error:\\n` +\n        `  Code: ${response.status} (${response.statusText})\\n` +\n        `  Body: ${responseText}\\n`;\n    if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n        return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, { request, backoff, tries: tries + 1 });\n    }\n    throw new _errors__WEBPACK_IMPORTED_MODULE_8__.AgentHTTPResponseError(errorMessage, {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(response.headers),\n    });\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/agent/http/index.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expiry: function() { return /* binding */ Expiry; },\n/* harmony export */   httpHeadersTransform: function() { return /* binding */ httpHeadersTransform; },\n/* harmony export */   makeExpiryTransform: function() { return /* binding */ makeExpiryTransform; },\n/* harmony export */   makeNonceTransform: function() { return /* binding */ makeNonceTransform; }\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"./node_modules/@dfinity/candid/lib/esm/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! simple-cbor */ \"./node_modules/simple-cbor/src/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n\n\n\nconst NANOSECONDS_PER_MILLISECONDS = BigInt(1000000);\nconst REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1000;\nclass Expiry {\n    constructor(deltaInMSec) {\n        // Use bigint because it can overflow the maximum number allowed in a double float.\n        const raw_value = BigInt(Math.floor(Date.now() + deltaInMSec - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) *\n            NANOSECONDS_PER_MILLISECONDS;\n        // round down to the nearest second\n        const ingress_as_seconds = raw_value / BigInt(1000000000);\n        // round down to nearest minute\n        const ingress_as_minutes = ingress_as_seconds / BigInt(60);\n        const rounded_down_nanos = ingress_as_minutes * BigInt(60) * BigInt(1000000000);\n        this._value = rounded_down_nanos;\n    }\n    toCBOR() {\n        // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).\n        return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.u64(this._value.toString(16), 16);\n    }\n    toHash() {\n        return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._value);\n    }\n}\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nfunction makeNonceTransform(nonceFn = _types__WEBPACK_IMPORTED_MODULE_2__.makeNonce) {\n    return async (request) => {\n        // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n        const headers = request.request.headers;\n        // TODO: uncomment this when the http proxy supports it.\n        // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n        request.request.headers = headers;\n        // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n        if (request.endpoint === \"call\" /* Endpoint.Call */) {\n            request.body.nonce = nonceFn();\n        }\n    };\n}\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n *\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nfunction makeExpiryTransform(delayInMilliseconds) {\n    return async (request) => {\n        request.body.ingress_expiry = new Expiry(delayInMilliseconds);\n    };\n}\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n *\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nfunction httpHeadersTransform(headers) {\n    const headerFields = [];\n    headers.forEach((value, key) => {\n        headerFields.push([key, value]);\n    });\n    return headerFields;\n}\n//# sourceMappingURL=transforms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hZ2VudC9odHRwL3RyYW5zZm9ybXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBNEM7QUFDUjtBQUNDO0FBQ3JDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBVTtBQUN6QjtBQUNBO0FBQ0EsZUFBZSwwREFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNDQUFzQyw2Q0FBUztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hZ2VudC9odHRwL3RyYW5zZm9ybXMuanM/MjJjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsZWJFbmNvZGUgfSBmcm9tICdAZGZpbml0eS9jYW5kaWQnO1xuaW1wb3J0ICogYXMgY2JvciBmcm9tICdzaW1wbGUtY2Jvcic7XG5pbXBvcnQgeyBtYWtlTm9uY2UsIH0gZnJvbSAnLi90eXBlcyc7XG5jb25zdCBOQU5PU0VDT05EU19QRVJfTUlMTElTRUNPTkRTID0gQmlnSW50KDEwMDAwMDApO1xuY29uc3QgUkVQTElDQV9QRVJNSVRURURfRFJJRlRfTUlMTElTRUNPTkRTID0gNjAgKiAxMDAwO1xuZXhwb3J0IGNsYXNzIEV4cGlyeSB7XG4gICAgY29uc3RydWN0b3IoZGVsdGFJbk1TZWMpIHtcbiAgICAgICAgLy8gVXNlIGJpZ2ludCBiZWNhdXNlIGl0IGNhbiBvdmVyZmxvdyB0aGUgbWF4aW11bSBudW1iZXIgYWxsb3dlZCBpbiBhIGRvdWJsZSBmbG9hdC5cbiAgICAgICAgY29uc3QgcmF3X3ZhbHVlID0gQmlnSW50KE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIGRlbHRhSW5NU2VjIC0gUkVQTElDQV9QRVJNSVRURURfRFJJRlRfTUlMTElTRUNPTkRTKSkgKlxuICAgICAgICAgICAgTkFOT1NFQ09ORFNfUEVSX01JTExJU0VDT05EUztcbiAgICAgICAgLy8gcm91bmQgZG93biB0byB0aGUgbmVhcmVzdCBzZWNvbmRcbiAgICAgICAgY29uc3QgaW5ncmVzc19hc19zZWNvbmRzID0gcmF3X3ZhbHVlIC8gQmlnSW50KDEwMDAwMDAwMDApO1xuICAgICAgICAvLyByb3VuZCBkb3duIHRvIG5lYXJlc3QgbWludXRlXG4gICAgICAgIGNvbnN0IGluZ3Jlc3NfYXNfbWludXRlcyA9IGluZ3Jlc3NfYXNfc2Vjb25kcyAvIEJpZ0ludCg2MCk7XG4gICAgICAgIGNvbnN0IHJvdW5kZWRfZG93bl9uYW5vcyA9IGluZ3Jlc3NfYXNfbWludXRlcyAqIEJpZ0ludCg2MCkgKiBCaWdJbnQoMTAwMDAwMDAwMCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gcm91bmRlZF9kb3duX25hbm9zO1xuICAgIH1cbiAgICB0b0NCT1IoKSB7XG4gICAgICAgIC8vIFRPRE86IGNoYW5nZSB0aGlzIHRvIHRha2UgdGhlIG1pbmltdW0gYW1vdW50IG9mIHNwYWNlIChpdCBhbHdheXMgdGFrZXMgOCBieXRlcyBub3cpLlxuICAgICAgICByZXR1cm4gY2Jvci52YWx1ZS51NjQodGhpcy5fdmFsdWUudG9TdHJpbmcoMTYpLCAxNik7XG4gICAgfVxuICAgIHRvSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIGxlYkVuY29kZSh0aGlzLl92YWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBOb25jZSB0cmFuc2Zvcm0sIHdoaWNoIHRha2VzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgQnVmZmVyLCBhbmQgYWRkcyBpdFxuICogYXMgdGhlIG5vbmNlIHRvIGV2ZXJ5IGNhbGwgcmVxdWVzdHMuXG4gKiBAcGFyYW0gbm9uY2VGbiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGJ1ZmZlci4gQnkgZGVmYXVsdCB1c2VzIGEgc2VtaS1yYW5kb20gbWV0aG9kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU5vbmNlVHJhbnNmb3JtKG5vbmNlRm4gPSBtYWtlTm9uY2UpIHtcbiAgICByZXR1cm4gYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgLy8gTm9uY2UgbmVlZHMgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgaGVhZGVyIGZvciBhbGwgcmVxdWVzdHMsIHRvIGVuYWJsZSBsb2dzIHRvIGJlIGNvcnJlbGF0ZWQgd2l0aCByZXF1ZXN0cy5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHJlcXVlc3QucmVxdWVzdC5oZWFkZXJzO1xuICAgICAgICAvLyBUT0RPOiB1bmNvbW1lbnQgdGhpcyB3aGVuIHRoZSBodHRwIHByb3h5IHN1cHBvcnRzIGl0LlxuICAgICAgICAvLyBoZWFkZXJzLnNldCgnWC1JQy1SZXF1ZXN0LUlEJywgdG9IZXgobmV3IFVpbnQ4QXJyYXkobm9uY2UpKSk7XG4gICAgICAgIHJlcXVlc3QucmVxdWVzdC5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgLy8gTm9uY2Ugb25seSBuZWVkcyB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZSBib2R5IGZvciBhc3luYyBjYWxscywgdG8gcHJldmVudCByZXBsYXkgYXR0YWNrcy5cbiAgICAgICAgaWYgKHJlcXVlc3QuZW5kcG9pbnQgPT09IFwiY2FsbFwiIC8qIEVuZHBvaW50LkNhbGwgKi8pIHtcbiAgICAgICAgICAgIHJlcXVlc3QuYm9keS5ub25jZSA9IG5vbmNlRm4oKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIHRyYW5zZm9ybSB0aGF0IGFkZHMgYSBkZWxheSAoYnkgZGVmYXVsdCA1IG1pbnV0ZXMpIHRvIHRoZSBleHBpcnkuXG4gKlxuICogQHBhcmFtIGRlbGF5SW5NaWxsaXNlY29uZHMgVGhlIGRlbGF5IHRvIGFkZCB0byB0aGUgY2FsbCB0aW1lLCBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXhwaXJ5VHJhbnNmb3JtKGRlbGF5SW5NaWxsaXNlY29uZHMpIHtcbiAgICByZXR1cm4gYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgcmVxdWVzdC5ib2R5LmluZ3Jlc3NfZXhwaXJ5ID0gbmV3IEV4cGlyeShkZWxheUluTWlsbGlzZWNvbmRzKTtcbiAgICB9O1xufVxuLyoqXG4gKiBNYXBzIHRoZSBkZWZhdWx0IGZldGNoIGhlYWRlcnMgZmllbGQgdG8gdGhlIHNlcmlhbGl6YWJsZSBIdHRwSGVhZGVyRmllbGQuXG4gKlxuICogQHBhcmFtIGhlYWRlcnMgRmV0Y2ggZGVmaW5pdGlvbiBvZiB0aGUgaGVhZGVycyB0eXBlXG4gKiBAcmV0dXJucyBhcnJheSBvZiBoZWFkZXIgZmllbGRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBodHRwSGVhZGVyc1RyYW5zZm9ybShoZWFkZXJzKSB7XG4gICAgY29uc3QgaGVhZGVyRmllbGRzID0gW107XG4gICAgaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGhlYWRlckZpZWxkcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlYWRlckZpZWxkcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * This file is generated from the candid for asset management.\n * didc version: 0.4.0\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n/* harmony default export */ __webpack_exports__[\"default\"] = (({ IDL }) => {\n    const bitcoin_network = IDL.Variant({\n        mainnet: IDL.Null,\n        testnet: IDL.Null,\n    });\n    const bitcoin_address = IDL.Text;\n    const bitcoin_get_balance_args = IDL.Record({\n        network: bitcoin_network,\n        address: bitcoin_address,\n        min_confirmations: IDL.Opt(IDL.Nat32),\n    });\n    const satoshi = IDL.Nat64;\n    const bitcoin_get_balance_result = satoshi;\n    const bitcoin_get_current_fee_percentiles_args = IDL.Record({\n        network: bitcoin_network,\n    });\n    const millisatoshi_per_byte = IDL.Nat64;\n    const bitcoin_get_current_fee_percentiles_result = IDL.Vec(millisatoshi_per_byte);\n    const bitcoin_get_utxos_args = IDL.Record({\n        network: bitcoin_network,\n        filter: IDL.Opt(IDL.Variant({\n            page: IDL.Vec(IDL.Nat8),\n            min_confirmations: IDL.Nat32,\n        })),\n        address: bitcoin_address,\n    });\n    const block_hash = IDL.Vec(IDL.Nat8);\n    const outpoint = IDL.Record({\n        txid: IDL.Vec(IDL.Nat8),\n        vout: IDL.Nat32,\n    });\n    const utxo = IDL.Record({\n        height: IDL.Nat32,\n        value: satoshi,\n        outpoint: outpoint,\n    });\n    const bitcoin_get_utxos_result = IDL.Record({\n        next_page: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        tip_height: IDL.Nat32,\n        tip_block_hash: block_hash,\n        utxos: IDL.Vec(utxo),\n    });\n    const bitcoin_send_transaction_args = IDL.Record({\n        transaction: IDL.Vec(IDL.Nat8),\n        network: bitcoin_network,\n    });\n    const canister_id = IDL.Principal;\n    const canister_info_args = IDL.Record({\n        canister_id: canister_id,\n        num_requested_changes: IDL.Opt(IDL.Nat64),\n    });\n    const change_origin = IDL.Variant({\n        from_user: IDL.Record({ user_id: IDL.Principal }),\n        from_canister: IDL.Record({\n            canister_version: IDL.Opt(IDL.Nat64),\n            canister_id: IDL.Principal,\n        }),\n    });\n    const change_details = IDL.Variant({\n        creation: IDL.Record({ controllers: IDL.Vec(IDL.Principal) }),\n        code_deployment: IDL.Record({\n            mode: IDL.Variant({\n                reinstall: IDL.Null,\n                upgrade: IDL.Null,\n                install: IDL.Null,\n            }),\n            module_hash: IDL.Vec(IDL.Nat8),\n        }),\n        controllers_change: IDL.Record({\n            controllers: IDL.Vec(IDL.Principal),\n        }),\n        code_uninstall: IDL.Null,\n    });\n    const change = IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        canister_version: IDL.Nat64,\n        origin: change_origin,\n        details: change_details,\n    });\n    const canister_info_result = IDL.Record({\n        controllers: IDL.Vec(IDL.Principal),\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        recent_changes: IDL.Vec(change),\n        total_num_changes: IDL.Nat64,\n    });\n    const canister_status_args = IDL.Record({ canister_id: canister_id });\n    const log_visibility = IDL.Variant({\n        controllers: IDL.Null,\n        public: IDL.Null,\n    });\n    const definite_canister_settings = IDL.Record({\n        freezing_threshold: IDL.Nat,\n        controllers: IDL.Vec(IDL.Principal),\n        reserved_cycles_limit: IDL.Nat,\n        log_visibility: log_visibility,\n        wasm_memory_limit: IDL.Nat,\n        memory_allocation: IDL.Nat,\n        compute_allocation: IDL.Nat,\n    });\n    const canister_status_result = IDL.Record({\n        status: IDL.Variant({\n            stopped: IDL.Null,\n            stopping: IDL.Null,\n            running: IDL.Null,\n        }),\n        memory_size: IDL.Nat,\n        cycles: IDL.Nat,\n        settings: definite_canister_settings,\n        query_stats: IDL.Record({\n            response_payload_bytes_total: IDL.Nat,\n            num_instructions_total: IDL.Nat,\n            num_calls_total: IDL.Nat,\n            request_payload_bytes_total: IDL.Nat,\n        }),\n        idle_cycles_burned_per_day: IDL.Nat,\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        reserved_cycles: IDL.Nat,\n    });\n    const clear_chunk_store_args = IDL.Record({ canister_id: canister_id });\n    const canister_settings = IDL.Record({\n        freezing_threshold: IDL.Opt(IDL.Nat),\n        controllers: IDL.Opt(IDL.Vec(IDL.Principal)),\n        reserved_cycles_limit: IDL.Opt(IDL.Nat),\n        log_visibility: IDL.Opt(log_visibility),\n        wasm_memory_limit: IDL.Opt(IDL.Nat),\n        memory_allocation: IDL.Opt(IDL.Nat),\n        compute_allocation: IDL.Opt(IDL.Nat),\n    });\n    const create_canister_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const create_canister_result = IDL.Record({ canister_id: canister_id });\n    const delete_canister_args = IDL.Record({ canister_id: canister_id });\n    const deposit_cycles_args = IDL.Record({ canister_id: canister_id });\n    const ecdsa_curve = IDL.Variant({ secp256k1: IDL.Null });\n    const ecdsa_public_key_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        canister_id: IDL.Opt(canister_id),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n    });\n    const ecdsa_public_key_result = IDL.Record({\n        public_key: IDL.Vec(IDL.Nat8),\n        chain_code: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_args = IDL.Record({ canister_id: canister_id });\n    const canister_log_record = IDL.Record({\n        idx: IDL.Nat64,\n        timestamp_nanos: IDL.Nat64,\n        content: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_result = IDL.Record({\n        canister_log_records: IDL.Vec(canister_log_record),\n    });\n    const http_header = IDL.Record({ value: IDL.Text, name: IDL.Text });\n    const http_request_result = IDL.Record({\n        status: IDL.Nat,\n        body: IDL.Vec(IDL.Nat8),\n        headers: IDL.Vec(http_header),\n    });\n    const http_request_args = IDL.Record({\n        url: IDL.Text,\n        method: IDL.Variant({\n            get: IDL.Null,\n            head: IDL.Null,\n            post: IDL.Null,\n        }),\n        max_response_bytes: IDL.Opt(IDL.Nat64),\n        body: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        transform: IDL.Opt(IDL.Record({\n            function: IDL.Func([\n                IDL.Record({\n                    context: IDL.Vec(IDL.Nat8),\n                    response: http_request_result,\n                }),\n            ], [http_request_result], ['query']),\n            context: IDL.Vec(IDL.Nat8),\n        })),\n        headers: IDL.Vec(http_header),\n    });\n    const canister_install_mode = IDL.Variant({\n        reinstall: IDL.Null,\n        upgrade: IDL.Opt(IDL.Record({\n            wasm_memory_persistence: IDL.Opt(IDL.Variant({ keep: IDL.Null, replace: IDL.Null })),\n            skip_pre_upgrade: IDL.Opt(IDL.Bool),\n        })),\n        install: IDL.Null,\n    });\n    const chunk_hash = IDL.Record({ hash: IDL.Vec(IDL.Nat8) });\n    const install_chunked_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module_hash: IDL.Vec(IDL.Nat8),\n        mode: canister_install_mode,\n        chunk_hashes_list: IDL.Vec(chunk_hash),\n        target_canister: canister_id,\n        store_canister: IDL.Opt(canister_id),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const wasm_module = IDL.Vec(IDL.Nat8);\n    const install_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module: wasm_module,\n        mode: canister_install_mode,\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const node_metrics_history_args = IDL.Record({\n        start_at_timestamp_nanos: IDL.Nat64,\n        subnet_id: IDL.Principal,\n    });\n    const node_metrics = IDL.Record({\n        num_block_failures_total: IDL.Nat64,\n        node_id: IDL.Principal,\n        num_blocks_proposed_total: IDL.Nat64,\n    });\n    const node_metrics_history_result = IDL.Vec(IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        node_metrics: IDL.Vec(node_metrics),\n    }));\n    const provisional_create_canister_with_cycles_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        specified_id: IDL.Opt(canister_id),\n        amount: IDL.Opt(IDL.Nat),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const provisional_create_canister_with_cycles_result = IDL.Record({\n        canister_id: canister_id,\n    });\n    const provisional_top_up_canister_args = IDL.Record({\n        canister_id: canister_id,\n        amount: IDL.Nat,\n    });\n    const raw_rand_result = IDL.Vec(IDL.Nat8);\n    const sign_with_ecdsa_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n        message_hash: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_ecdsa_result = IDL.Record({\n        signature: IDL.Vec(IDL.Nat8),\n    });\n    const start_canister_args = IDL.Record({ canister_id: canister_id });\n    const stop_canister_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_result = IDL.Vec(chunk_hash);\n    const uninstall_code_args = IDL.Record({\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const update_settings_args = IDL.Record({\n        canister_id: IDL.Principal,\n        settings: canister_settings,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const upload_chunk_args = IDL.Record({\n        chunk: IDL.Vec(IDL.Nat8),\n        canister_id: IDL.Principal,\n    });\n    const upload_chunk_result = chunk_hash;\n    return IDL.Service({\n        bitcoin_get_balance: IDL.Func([bitcoin_get_balance_args], [bitcoin_get_balance_result], []),\n        bitcoin_get_current_fee_percentiles: IDL.Func([bitcoin_get_current_fee_percentiles_args], [bitcoin_get_current_fee_percentiles_result], []),\n        bitcoin_get_utxos: IDL.Func([bitcoin_get_utxos_args], [bitcoin_get_utxos_result], []),\n        bitcoin_send_transaction: IDL.Func([bitcoin_send_transaction_args], [], []),\n        canister_info: IDL.Func([canister_info_args], [canister_info_result], []),\n        canister_status: IDL.Func([canister_status_args], [canister_status_result], []),\n        clear_chunk_store: IDL.Func([clear_chunk_store_args], [], []),\n        create_canister: IDL.Func([create_canister_args], [create_canister_result], []),\n        delete_canister: IDL.Func([delete_canister_args], [], []),\n        deposit_cycles: IDL.Func([deposit_cycles_args], [], []),\n        ecdsa_public_key: IDL.Func([ecdsa_public_key_args], [ecdsa_public_key_result], []),\n        fetch_canister_logs: IDL.Func([fetch_canister_logs_args], [fetch_canister_logs_result], ['query']),\n        http_request: IDL.Func([http_request_args], [http_request_result], []),\n        install_chunked_code: IDL.Func([install_chunked_code_args], [], []),\n        install_code: IDL.Func([install_code_args], [], []),\n        node_metrics_history: IDL.Func([node_metrics_history_args], [node_metrics_history_result], []),\n        provisional_create_canister_with_cycles: IDL.Func([provisional_create_canister_with_cycles_args], [provisional_create_canister_with_cycles_result], []),\n        provisional_top_up_canister: IDL.Func([provisional_top_up_canister_args], [], []),\n        raw_rand: IDL.Func([], [raw_rand_result], []),\n        sign_with_ecdsa: IDL.Func([sign_with_ecdsa_args], [sign_with_ecdsa_result], []),\n        start_canister: IDL.Func([start_canister_args], [], []),\n        stop_canister: IDL.Func([stop_canister_args], [], []),\n        stored_chunks: IDL.Func([stored_chunks_args], [stored_chunks_result], []),\n        uninstall_code: IDL.Func([uninstall_code_args], [], []),\n        update_settings: IDL.Func([update_settings_args], [], []),\n        upload_chunk: IDL.Func([upload_chunk_args], [upload_chunk_result], []),\n    });\n});\n//# sourceMappingURL=management_idl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/certificate.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/certificate.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Certificate: function() { return /* binding */ Certificate; },\n/* harmony export */   CertificateVerificationError: function() { return /* binding */ CertificateVerificationError; },\n/* harmony export */   LookupStatus: function() { return /* binding */ LookupStatus; },\n/* harmony export */   NodeType: function() { return /* binding */ NodeType; },\n/* harmony export */   check_canister_ranges: function() { return /* binding */ check_canister_ranges; },\n/* harmony export */   find_label: function() { return /* binding */ find_label; },\n/* harmony export */   flatten_forks: function() { return /* binding */ flatten_forks; },\n/* harmony export */   hashTreeToString: function() { return /* binding */ hashTreeToString; },\n/* harmony export */   lookupResultToBuffer: function() { return /* binding */ lookupResultToBuffer; },\n/* harmony export */   lookup_path: function() { return /* binding */ lookup_path; },\n/* harmony export */   reconstruct: function() { return /* binding */ reconstruct; }\n/* harmony export */ });\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cbor */ \"./node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"./node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request_id */ \"./node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/buffer */ \"./node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @dfinity/principal */ \"./node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/bls */ \"./node_modules/@dfinity/agent/lib/esm/utils/bls.js\");\n/* harmony import */ var _utils_leb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/leb */ \"./node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n\n\n\n\n\n\n\n/**\n * A certificate may fail verification with respect to the provided public key\n */\nclass CertificateVerificationError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(reason) {\n        super(`Invalid certificate: ${reason}`);\n    }\n}\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Empty\"] = 0] = \"Empty\";\n    NodeType[NodeType[\"Fork\"] = 1] = \"Fork\";\n    NodeType[NodeType[\"Labeled\"] = 2] = \"Labeled\";\n    NodeType[NodeType[\"Leaf\"] = 3] = \"Leaf\";\n    NodeType[NodeType[\"Pruned\"] = 4] = \"Pruned\";\n})(NodeType || (NodeType = {}));\n/**\n * Make a human readable string out of a hash tree.\n * @param tree\n */\nfunction hashTreeToString(tree) {\n    const indent = (s) => s\n        .split('\\n')\n        .map(x => '  ' + x)\n        .join('\\n');\n    function labelToString(label) {\n        const decoder = new TextDecoder(undefined, { fatal: true });\n        try {\n            return JSON.stringify(decoder.decode(label));\n        }\n        catch (e) {\n            return `data(...${label.byteLength} bytes)`;\n        }\n    }\n    switch (tree[0]) {\n        case NodeType.Empty:\n            return '()';\n        case NodeType.Fork: {\n            if (tree[1] instanceof Array && tree[2] instanceof ArrayBuffer) {\n                const left = hashTreeToString(tree[1]);\n                const right = hashTreeToString(tree[2]);\n                return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n            }\n            else {\n                throw new Error('Invalid tree structure for fork');\n            }\n        }\n        case NodeType.Labeled: {\n            if (tree[1] instanceof ArrayBuffer && tree[2] instanceof ArrayBuffer) {\n                const label = labelToString(tree[1]);\n                const sub = hashTreeToString(tree[2]);\n                return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n            }\n            else {\n                throw new Error('Invalid tree structure for labeled');\n            }\n        }\n        case NodeType.Leaf: {\n            if (!tree[1]) {\n                throw new Error('Invalid tree structure for leaf');\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `leaf(...${tree[1].byteLength} bytes)`;\n        }\n        case NodeType.Pruned: {\n            if (!tree[1]) {\n                throw new Error('Invalid tree structure for pruned');\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `pruned(${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(new Uint8Array(tree[1]))}`;\n        }\n        default: {\n            return `unknown(${JSON.stringify(tree[0])})`;\n        }\n    }\n}\nfunction isBufferGreaterThan(a, b) {\n    const a8 = new Uint8Array(a);\n    const b8 = new Uint8Array(b);\n    for (let i = 0; i < a8.length; i++) {\n        if (a8[i] > b8[i]) {\n            return true;\n        }\n    }\n    return false;\n}\nclass Certificate {\n    constructor(certificate, _rootKey, _canisterId, _blsVerify, \n    // Default to 5 minutes\n    _maxAgeInMinutes = 5) {\n        this._rootKey = _rootKey;\n        this._canisterId = _canisterId;\n        this._blsVerify = _blsVerify;\n        this._maxAgeInMinutes = _maxAgeInMinutes;\n        this.cert = _cbor__WEBPACK_IMPORTED_MODULE_0__.decode(new Uint8Array(certificate));\n    }\n    /**\n     * Create a new instance of a certificate, automatically verifying it. Throws a\n     * CertificateVerificationError if the certificate cannot be verified.\n     * @constructs  Certificate\n     * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n     * @param {ArrayBuffer} options.certificate The bytes of the certificate\n     * @param {ArrayBuffer} options.rootKey The root key to verify against\n     * @param {Principal} options.canisterId The effective or signing canister ID\n     * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.\n     * @throws {CertificateVerificationError}\n     */\n    static async create(options) {\n        const cert = Certificate.createUnverified(options);\n        await cert.verify();\n        return cert;\n    }\n    static createUnverified(options) {\n        let blsVerify = options.blsVerify;\n        if (!blsVerify) {\n            blsVerify = _utils_bls__WEBPACK_IMPORTED_MODULE_5__.blsVerify;\n        }\n        return new Certificate(options.certificate, options.rootKey, options.canisterId, blsVerify, options.maxAgeInMinutes);\n    }\n    lookup(path) {\n        // constrain the type of the result, so that empty HashTree is undefined\n        return lookup_path(path, this.cert.tree);\n    }\n    lookup_label(label) {\n        return this.lookup([label]);\n    }\n    async verify() {\n        const rootHash = await reconstruct(this.cert.tree);\n        const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n        const sig = this.cert.signature;\n        const key = extractDER(derKey);\n        const msg = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-state-root'), rootHash);\n        let sigVer = false;\n        const lookupTime = lookupResultToBuffer(this.lookup(['time']));\n        if (!lookupTime) {\n            // Should never happen - time is always present in IC certificates\n            throw new CertificateVerificationError('Certificate does not contain a time');\n        }\n        const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n        const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1000;\n        const now = Date.now();\n        const earliestCertificateTime = now - MAX_AGE_IN_MSEC;\n        const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC;\n        const certTime = (0,_utils_leb__WEBPACK_IMPORTED_MODULE_6__.decodeTime)(lookupTime);\n        if (certTime.getTime() < earliestCertificateTime) {\n            throw new CertificateVerificationError(`Certificate is signed more than ${this._maxAgeInMinutes} minutes in the past. Certificate time: ` +\n                certTime.toISOString() +\n                ' Current time: ' +\n                new Date(now).toISOString());\n        }\n        else if (certTime.getTime() > fiveMinutesFromNow) {\n            throw new CertificateVerificationError('Certificate is signed more than 5 minutes in the future. Certificate time: ' +\n                certTime.toISOString() +\n                ' Current time: ' +\n                new Date(now).toISOString());\n        }\n        try {\n            sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n        }\n        catch (err) {\n            sigVer = false;\n        }\n        if (!sigVer) {\n            throw new CertificateVerificationError('Signature verification failed');\n        }\n    }\n    async _checkDelegationAndGetKey(d) {\n        if (!d) {\n            return this._rootKey;\n        }\n        const cert = await Certificate.createUnverified({\n            certificate: d.certificate,\n            rootKey: this._rootKey,\n            canisterId: this._canisterId,\n            blsVerify: this._blsVerify,\n            // Do not check max age for delegation certificates\n            maxAgeInMinutes: Infinity,\n        });\n        if (cert.cert.delegation) {\n            throw new CertificateVerificationError('Delegation certificates cannot be nested');\n        }\n        await cert.verify();\n        const canisterInRange = check_canister_ranges({\n            canisterId: this._canisterId,\n            subnetId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(new Uint8Array(d.subnet_id)),\n            tree: cert.cert.tree,\n        });\n        if (!canisterInRange) {\n            throw new CertificateVerificationError(`Canister ${this._canisterId} not in range of delegations for subnet 0x${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(d.subnet_id)}`);\n        }\n        const publicKeyLookup = lookupResultToBuffer(cert.lookup(['subnet', d.subnet_id, 'public_key']));\n        if (!publicKeyLookup) {\n            throw new Error(`Could not find subnet key for subnet 0x${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(d.subnet_id)}`);\n        }\n        return publicKeyLookup;\n    }\n}\nconst DER_PREFIX = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.fromHex)('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100');\nconst KEY_LENGTH = 96;\nfunction extractDER(buf) {\n    const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n    if (buf.byteLength !== expectedLength) {\n        throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);\n    }\n    const prefix = buf.slice(0, DER_PREFIX.byteLength);\n    if (!(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.bufEquals)(prefix, DER_PREFIX)) {\n        throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);\n    }\n    return buf.slice(DER_PREFIX.byteLength);\n}\n/**\n * utility function to constrain the type of a path\n * @param {ArrayBuffer | HashTree | undefined} result - the result of a lookup\n * @returns ArrayBuffer or Undefined\n */\nfunction lookupResultToBuffer(result) {\n    if (result.status !== LookupStatus.Found) {\n        return undefined;\n    }\n    if (result.value instanceof ArrayBuffer) {\n        return result.value;\n    }\n    if (result.value instanceof Uint8Array) {\n        return result.value.buffer;\n    }\n    return undefined;\n}\n/**\n * @param t\n */\nasync function reconstruct(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)(domain_sep('ic-hashtree-empty'));\n        case NodeType.Pruned:\n            return t[1];\n        case NodeType.Leaf:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-leaf'), t[1]));\n        case NodeType.Labeled:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n        case NodeType.Fork:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-fork'), await reconstruct(t[1]), await reconstruct(t[2])));\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction domain_sep(s) {\n    const len = new Uint8Array([s.length]);\n    const str = new TextEncoder().encode(s);\n    return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(len, str);\n}\nvar LookupStatus;\n(function (LookupStatus) {\n    LookupStatus[\"Unknown\"] = \"unknown\";\n    LookupStatus[\"Absent\"] = \"absent\";\n    LookupStatus[\"Found\"] = \"found\";\n})(LookupStatus || (LookupStatus = {}));\nvar LabelLookupStatus;\n(function (LabelLookupStatus) {\n    LabelLookupStatus[\"Less\"] = \"less\";\n    LabelLookupStatus[\"Greater\"] = \"greater\";\n})(LabelLookupStatus || (LabelLookupStatus = {}));\nfunction lookup_path(path, tree) {\n    if (path.length === 0) {\n        switch (tree[0]) {\n            case NodeType.Leaf: {\n                if (!tree[1]) {\n                    throw new Error('Invalid tree structure for leaf');\n                }\n                if (tree[1] instanceof ArrayBuffer) {\n                    return {\n                        status: LookupStatus.Found,\n                        value: tree[1],\n                    };\n                }\n                if (tree[1] instanceof Uint8Array) {\n                    return {\n                        status: LookupStatus.Found,\n                        value: tree[1].buffer,\n                    };\n                }\n                return {\n                    status: LookupStatus.Found,\n                    value: tree[1],\n                };\n            }\n            default: {\n                return {\n                    status: LookupStatus.Found,\n                    value: tree,\n                };\n            }\n        }\n    }\n    const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];\n    const lookupResult = find_label(label, tree);\n    switch (lookupResult.status) {\n        case LookupStatus.Found: {\n            return lookup_path(path.slice(1), lookupResult.value);\n        }\n        case LabelLookupStatus.Greater:\n        case LabelLookupStatus.Less: {\n            return {\n                status: LookupStatus.Absent,\n            };\n        }\n        default: {\n            return lookupResult;\n        }\n    }\n}\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param t - the tree to flatten\n * @returns HashTree[] - the flattened tree\n */\nfunction flatten_forks(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return [];\n        case NodeType.Fork:\n            return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n        default:\n            return [t];\n    }\n}\nfunction find_label(label, tree) {\n    switch (tree[0]) {\n        // if we have a labelled node, compare the node's label to the one we are\n        // looking for\n        case NodeType.Labeled:\n            // if the label we're searching for is greater than this node's label,\n            // we need to keep searching\n            if (isBufferGreaterThan(label, tree[1])) {\n                return {\n                    status: LabelLookupStatus.Greater,\n                };\n            }\n            // if the label we're searching for is equal this node's label, we can\n            // stop searching and return the found node\n            if ((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.bufEquals)(label, tree[1])) {\n                return {\n                    status: LookupStatus.Found,\n                    value: tree[2],\n                };\n            }\n            // if the label we're searching for is not greater than or equal to this\n            // node's label, then it's less than this node's label, and we can stop\n            // searching because we've looked too far\n            return {\n                status: LabelLookupStatus.Less,\n            };\n        // if we have a fork node, we need to search both sides, starting with the left\n        case NodeType.Fork:\n            // search in the left node\n            const leftLookupResult = find_label(label, tree[1]);\n            switch (leftLookupResult.status) {\n                // if the label we're searching for is greater than the left node lookup,\n                // we need to search the right node\n                case LabelLookupStatus.Greater: {\n                    const rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we can stop searching and say that the label is provably Absent\n                    if (rightLookupResult.status === LabelLookupStatus.Less) {\n                        return {\n                            status: LookupStatus.Absent,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the left node returns an uncertain result, we need to search the\n                // right node\n                case LookupStatus.Unknown: {\n                    let rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we also need to return an uncertain result\n                    if (rightLookupResult.status === LabelLookupStatus.Less) {\n                        return {\n                            status: LookupStatus.Unknown,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the label we're searching for is not greater than the left node\n                // lookup, or the result is not uncertain, we stop searching and return\n                // whatever the result of the left node lookup was, which can be either\n                // Found or Absent\n                default: {\n                    return leftLookupResult;\n                }\n            }\n        // if we encounter a Pruned node, we can't know for certain if the label\n        // we're searching for is present or not\n        case NodeType.Pruned:\n            return {\n                status: LookupStatus.Unknown,\n            };\n        // if the current node is Empty, or a Leaf, we can stop searching because\n        // we know for sure that the label we're searching for is not present\n        default:\n            return {\n                status: LookupStatus.Absent,\n            };\n    }\n}\n/**\n * Check if a canister falls within a range of canisters\n * @param canisterId Principal\n * @param ranges [Principal, Principal][]\n * @returns\n */\nfunction check_canister_ranges(params) {\n    const { canisterId, subnetId, tree } = params;\n    const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n    if (rangeLookup.status !== LookupStatus.Found || !(rangeLookup.value instanceof ArrayBuffer)) {\n        throw new Error(`Could not find canister ranges for subnet ${subnetId}`);\n    }\n    const ranges_arr = _cbor__WEBPACK_IMPORTED_MODULE_0__.decode(rangeLookup.value);\n    const ranges = ranges_arr.map(v => [\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(v[0]),\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(v[1]),\n    ]);\n    const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n    return canisterInRange;\n}\n//# sourceMappingURL=certificate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/certificate.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/errors.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentError: function() { return /* binding */ AgentError; }\n/* harmony export */ });\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * @todo https://github.com/dfinity/agent-js/issues/420\n */\nclass AgentError extends Error {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        Object.setPrototypeOf(this, AgentError.prototype);\n    }\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vZXJyb3JzLmpzP2EzYTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbiBlcnJvciB0aGF0IGhhcHBlbnMgaW4gdGhlIEFnZW50LiBUaGlzIGlzIHRoZSByb290IG9mIGFsbCBlcnJvcnMgYW5kIHNob3VsZCBiZSB1c2VkXG4gKiBldmVyeXdoZXJlIGluIHRoZSBBZ2VudCBjb2RlICh0aGlzIHBhY2thZ2UpLlxuICpcbiAqIEB0b2RvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZmluaXR5L2FnZW50LWpzL2lzc3Vlcy80MjBcbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFnZW50RXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/errors.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/fetch_candid.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/fetch_candid.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCandid: function() { return /* binding */ fetchCandid; }\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"./node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _canisterStatus_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canisterStatus/index */ \"./node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _agent_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./agent/http */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actor */ \"./node_modules/@dfinity/agent/lib/esm/actor.js\");\n\n\n\n\n/**\n * Retrieves the Candid interface for the specified canister.\n *\n * @param agent The agent to use for the request (usually an `HttpAgent`)\n * @param canisterId A string corresponding to the canister ID\n * @returns Candid source code\n */\nasync function fetchCandid(canisterId, agent) {\n    if (!agent) {\n        // Create an anonymous `HttpAgent` (adapted from Candid UI)\n        agent = new _agent_http__WEBPACK_IMPORTED_MODULE_2__.HttpAgent();\n        if (agent.isLocal()) {\n            agent.fetchRootKey();\n        }\n    }\n    // Attempt to use canister metadata\n    const status = await _canisterStatus_index__WEBPACK_IMPORTED_MODULE_1__.request({\n        agent,\n        canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(canisterId),\n        paths: ['candid'],\n    });\n    const candid = status.get('candid');\n    if (candid) {\n        return candid;\n    }\n    // Use `__get_candid_interface_tmp_hack` for canisters without Candid metadata\n    const tmpHackInterface = ({ IDL }) => IDL.Service({\n        __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ['query']),\n    });\n    const actor = _actor__WEBPACK_IMPORTED_MODULE_3__.Actor.createActor(tmpHackInterface, { agent, canisterId });\n    return (await actor.__get_candid_interface_tmp_hack());\n}\n//# sourceMappingURL=fetch_candid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9mZXRjaF9jYW5kaWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDVTtBQUNoQjtBQUNUO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esb0JBQW9CLGtEQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMERBQXNCO0FBQy9DO0FBQ0Esb0JBQW9CLHlEQUFTO0FBQzdCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsS0FBSztBQUNyQztBQUNBLEtBQUs7QUFDTCxrQkFBa0IseUNBQUssaUNBQWlDLG1CQUFtQjtBQUMzRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vZmV0Y2hfY2FuZGlkLmpzP2E3ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpbmNpcGFsIH0gZnJvbSAnQGRmaW5pdHkvcHJpbmNpcGFsJztcbmltcG9ydCAqIGFzIENhbmlzdGVyU3RhdHVzIGZyb20gJy4vY2FuaXN0ZXJTdGF0dXMvaW5kZXgnO1xuaW1wb3J0IHsgSHR0cEFnZW50IH0gZnJvbSAnLi9hZ2VudC9odHRwJztcbmltcG9ydCB7IEFjdG9yIH0gZnJvbSAnLi9hY3Rvcic7XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgQ2FuZGlkIGludGVyZmFjZSBmb3IgdGhlIHNwZWNpZmllZCBjYW5pc3Rlci5cbiAqXG4gKiBAcGFyYW0gYWdlbnQgVGhlIGFnZW50IHRvIHVzZSBmb3IgdGhlIHJlcXVlc3QgKHVzdWFsbHkgYW4gYEh0dHBBZ2VudGApXG4gKiBAcGFyYW0gY2FuaXN0ZXJJZCBBIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoZSBjYW5pc3RlciBJRFxuICogQHJldHVybnMgQ2FuZGlkIHNvdXJjZSBjb2RlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaENhbmRpZChjYW5pc3RlcklkLCBhZ2VudCkge1xuICAgIGlmICghYWdlbnQpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFuIGFub255bW91cyBgSHR0cEFnZW50YCAoYWRhcHRlZCBmcm9tIENhbmRpZCBVSSlcbiAgICAgICAgYWdlbnQgPSBuZXcgSHR0cEFnZW50KCk7XG4gICAgICAgIGlmIChhZ2VudC5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGFnZW50LmZldGNoUm9vdEtleSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEF0dGVtcHQgdG8gdXNlIGNhbmlzdGVyIG1ldGFkYXRhXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgQ2FuaXN0ZXJTdGF0dXMucmVxdWVzdCh7XG4gICAgICAgIGFnZW50LFxuICAgICAgICBjYW5pc3RlcklkOiBQcmluY2lwYWwuZnJvbVRleHQoY2FuaXN0ZXJJZCksXG4gICAgICAgIHBhdGhzOiBbJ2NhbmRpZCddLFxuICAgIH0pO1xuICAgIGNvbnN0IGNhbmRpZCA9IHN0YXR1cy5nZXQoJ2NhbmRpZCcpO1xuICAgIGlmIChjYW5kaWQpIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpZDtcbiAgICB9XG4gICAgLy8gVXNlIGBfX2dldF9jYW5kaWRfaW50ZXJmYWNlX3RtcF9oYWNrYCBmb3IgY2FuaXN0ZXJzIHdpdGhvdXQgQ2FuZGlkIG1ldGFkYXRhXG4gICAgY29uc3QgdG1wSGFja0ludGVyZmFjZSA9ICh7IElETCB9KSA9PiBJREwuU2VydmljZSh7XG4gICAgICAgIF9fZ2V0X2NhbmRpZF9pbnRlcmZhY2VfdG1wX2hhY2s6IElETC5GdW5jKFtdLCBbSURMLlRleHRdLCBbJ3F1ZXJ5J10pLFxuICAgIH0pO1xuICAgIGNvbnN0IGFjdG9yID0gQWN0b3IuY3JlYXRlQWN0b3IodG1wSGFja0ludGVyZmFjZSwgeyBhZ2VudCwgY2FuaXN0ZXJJZCB9KTtcbiAgICByZXR1cm4gKGF3YWl0IGFjdG9yLl9fZ2V0X2NhbmRpZF9pbnRlcmZhY2VfdG1wX2hhY2soKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaF9jYW5kaWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/fetch_candid.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CanisterStatus: function() { return /* reexport module object */ _canisterStatus__WEBPACK_IMPORTED_MODULE_15__; },\n/* harmony export */   Cbor: function() { return /* reexport module object */ _cbor__WEBPACK_IMPORTED_MODULE_16__; },\n/* harmony export */   polling: function() { return /* reexport module object */ _polling__WEBPACK_IMPORTED_MODULE_14__; }\n/* harmony export */ });\n/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actor */ \"./node_modules/@dfinity/agent/lib/esm/actor.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _actor__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _actor__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ \"./node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _agent__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _agent__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _agent_http_transforms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./agent/http/transforms */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _agent_http_transforms__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _agent_http_transforms__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _agent_http_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./agent/http/types */ \"./node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _agent_http_types__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _agent_http_types__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./auth */ \"./node_modules/@dfinity/agent/lib/esm/auth.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _auth__WEBPACK_IMPORTED_MODULE_4__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _auth__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _canisters_asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./canisters/asset */ \"./node_modules/@dfinity/agent/lib/esm/canisters/asset.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _canisters_asset__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _canisters_asset__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./certificate */ \"./node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _certificate__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _certificate__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _der__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./der */ \"./node_modules/@dfinity/agent/lib/esm/der.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _der__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _der__WEBPACK_IMPORTED_MODULE_7__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _fetch_candid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fetch_candid */ \"./node_modules/@dfinity/agent/lib/esm/fetch_candid.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _fetch_candid__WEBPACK_IMPORTED_MODULE_8__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _fetch_candid__WEBPACK_IMPORTED_MODULE_8__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _public_key__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./public_key */ \"./node_modules/@dfinity/agent/lib/esm/public_key.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _public_key__WEBPACK_IMPORTED_MODULE_9__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _public_key__WEBPACK_IMPORTED_MODULE_9__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./request_id */ \"./node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _request_id__WEBPACK_IMPORTED_MODULE_10__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _request_id__WEBPACK_IMPORTED_MODULE_10__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/bls */ \"./node_modules/@dfinity/agent/lib/esm/utils/bls.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _utils_bls__WEBPACK_IMPORTED_MODULE_11__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _utils_bls__WEBPACK_IMPORTED_MODULE_11__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/buffer */ \"./node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _utils_buffer__WEBPACK_IMPORTED_MODULE_12__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _utils_buffer__WEBPACK_IMPORTED_MODULE_12__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_random__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/random */ \"./node_modules/@dfinity/agent/lib/esm/utils/random.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _utils_random__WEBPACK_IMPORTED_MODULE_13__) if([\"default\",\"polling\",\"CanisterStatus\",\"Cbor\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _utils_random__WEBPACK_IMPORTED_MODULE_13__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./polling */ \"./node_modules/@dfinity/agent/lib/esm/polling/index.js\");\n/* harmony import */ var _canisterStatus__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./canisterStatus */ \"./node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cbor */ \"./node_modules/@dfinity/agent/lib/esm/cbor.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNBO0FBQ2dCO0FBQ0w7QUFDWjtBQUNXO0FBQ0o7QUFDUjtBQUNTO0FBQ0Y7QUFDQTtBQUNEO0FBQ0c7QUFDQTtBQUNNO0FBQ2M7QUFDcEI7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vaW5kZXguanM/NzQxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FjdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vYWdlbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9hZ2VudC9odHRwL3RyYW5zZm9ybXMnO1xuZXhwb3J0ICogZnJvbSAnLi9hZ2VudC9odHRwL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vYXV0aCc7XG5leHBvcnQgKiBmcm9tICcuL2NhbmlzdGVycy9hc3NldCc7XG5leHBvcnQgKiBmcm9tICcuL2NlcnRpZmljYXRlJztcbmV4cG9ydCAqIGZyb20gJy4vZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZmV0Y2hfY2FuZGlkJztcbmV4cG9ydCAqIGZyb20gJy4vcHVibGljX2tleSc7XG5leHBvcnQgKiBmcm9tICcuL3JlcXVlc3RfaWQnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9ibHMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9idWZmZXInO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9yYW5kb20nO1xuZXhwb3J0ICogYXMgcG9sbGluZyBmcm9tICcuL3BvbGxpbmcnO1xuZXhwb3J0ICogYXMgQ2FuaXN0ZXJTdGF0dXMgZnJvbSAnLi9jYW5pc3RlclN0YXR1cyc7XG5leHBvcnQgKiBhcyBDYm9yIGZyb20gJy4vY2Jvcic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/polling/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/polling/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultStrategy: function() { return /* reexport safe */ _strategy__WEBPACK_IMPORTED_MODULE_3__.defaultStrategy; },\n/* harmony export */   pollForResponse: function() { return /* binding */ pollForResponse; },\n/* harmony export */   strategy: function() { return /* reexport module object */ _strategy__WEBPACK_IMPORTED_MODULE_3__; }\n/* harmony export */ });\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../agent */ \"./node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../certificate */ \"./node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/buffer */ \"./node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _strategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strategy */ \"./node_modules/@dfinity/agent/lib/esm/polling/strategy.js\");\n\n\n\n\n\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param strategy A polling strategy.\n * @param request Request for the readState call.\n * @param blsVerify - optional replacement function that verifies the BLS signature of a certificate.\n */\nasync function pollForResponse(agent, canisterId, requestId, strategy, \n// eslint-disable-next-line\nrequest, blsVerify) {\n    var _a;\n    const path = [new TextEncoder().encode('request_status'), requestId];\n    const currentRequest = request !== null && request !== void 0 ? request : (await ((_a = agent.createReadStateRequest) === null || _a === void 0 ? void 0 : _a.call(agent, { paths: [path] })));\n    const state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n    if (agent.rootKey == null)\n        throw new Error('Agent root key not initialized before polling');\n    const cert = await _certificate__WEBPACK_IMPORTED_MODULE_1__.Certificate.create({\n        certificate: state.certificate,\n        rootKey: agent.rootKey,\n        canisterId: canisterId,\n        blsVerify,\n    });\n    const maybeBuf = (0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, new TextEncoder().encode('status')]));\n    let status;\n    if (typeof maybeBuf === 'undefined') {\n        // Missing requestId means we need to wait\n        status = _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Unknown;\n    }\n    else {\n        status = new TextDecoder().decode(maybeBuf);\n    }\n    switch (status) {\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Replied: {\n            return (0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reply']));\n        }\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Received:\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Unknown:\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Processing:\n            // Execute the polling strategy, then retry.\n            await strategy(canisterId, requestId, status);\n            return pollForResponse(agent, canisterId, requestId, strategy, currentRequest);\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Rejected: {\n            const rejectCode = new Uint8Array((0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reject_code'])))[0];\n            const rejectMessage = new TextDecoder().decode((0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reject_message'])));\n            throw new Error(`Call was rejected:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(requestId)}\\n` +\n                `  Reject code: ${rejectCode}\\n` +\n                `  Reject text: ${rejectMessage}\\n`);\n        }\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Done:\n            // This is _technically_ not an error, but we still didn't see the `Replied` status so\n            // we don't know the result and cannot decode it.\n            throw new Error(`Call was marked as done but we never saw the reply:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(requestId)}\\n`);\n    }\n    throw new Error('unreachable');\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9wb2xsaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBdUQ7QUFDWTtBQUMzQjtBQUNEO0FBQ007QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0xBQWdMLGVBQWU7QUFDL0wsc0RBQXNELGVBQWU7QUFDckU7QUFDQTtBQUNBLHVCQUF1QixxREFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQkFBcUIsa0VBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrREFBMkI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsK0RBQTJCO0FBQ3hDLG1CQUFtQixrRUFBb0I7QUFDdkM7QUFDQSxhQUFhLCtEQUEyQjtBQUN4QyxhQUFhLCtEQUEyQjtBQUN4QyxhQUFhLCtEQUEyQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxhQUFhLCtEQUEyQjtBQUN4Qyw4Q0FBOEMsa0VBQW9CO0FBQ2xFLDJEQUEyRCxrRUFBb0I7QUFDL0U7QUFDQSxpQ0FBaUMsb0RBQUssWUFBWTtBQUNsRCxrQ0FBa0MsV0FBVztBQUM3QyxrQ0FBa0MsY0FBYztBQUNoRDtBQUNBLGFBQWEsK0RBQTJCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvREFBSyxZQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3BvbGxpbmcvaW5kZXguanM/MmEyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXMgfSBmcm9tICcuLi9hZ2VudCc7XG5pbXBvcnQgeyBDZXJ0aWZpY2F0ZSwgbG9va3VwUmVzdWx0VG9CdWZmZXIgfSBmcm9tICcuLi9jZXJ0aWZpY2F0ZSc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJy4uL3V0aWxzL2J1ZmZlcic7XG5leHBvcnQgKiBhcyBzdHJhdGVneSBmcm9tICcuL3N0cmF0ZWd5JztcbmV4cG9ydCB7IGRlZmF1bHRTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ3knO1xuLyoqXG4gKiBQb2xscyB0aGUgSUMgdG8gY2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgZ2l2ZW4gcmVxdWVzdCB0aGVuXG4gKiByZXR1cm5zIHRoZSByZXNwb25zZSBieXRlcyBvbmNlIHRoZSByZXF1ZXN0IGhhcyBiZWVuIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSBhZ2VudCBUaGUgYWdlbnQgdG8gdXNlIHRvIHBvbGwgcmVhZF9zdGF0ZS5cbiAqIEBwYXJhbSBjYW5pc3RlcklkIFRoZSBlZmZlY3RpdmUgY2FuaXN0ZXIgSUQuXG4gKiBAcGFyYW0gcmVxdWVzdElkIFRoZSBSZXF1ZXN0IElEIHRvIHBvbGwgc3RhdHVzIGZvci5cbiAqIEBwYXJhbSBzdHJhdGVneSBBIHBvbGxpbmcgc3RyYXRlZ3kuXG4gKiBAcGFyYW0gcmVxdWVzdCBSZXF1ZXN0IGZvciB0aGUgcmVhZFN0YXRlIGNhbGwuXG4gKiBAcGFyYW0gYmxzVmVyaWZ5IC0gb3B0aW9uYWwgcmVwbGFjZW1lbnQgZnVuY3Rpb24gdGhhdCB2ZXJpZmllcyB0aGUgQkxTIHNpZ25hdHVyZSBvZiBhIGNlcnRpZmljYXRlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9sbEZvclJlc3BvbnNlKGFnZW50LCBjYW5pc3RlcklkLCByZXF1ZXN0SWQsIHN0cmF0ZWd5LCBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxucmVxdWVzdCwgYmxzVmVyaWZ5KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHBhdGggPSBbbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdyZXF1ZXN0X3N0YXR1cycpLCByZXF1ZXN0SWRdO1xuICAgIGNvbnN0IGN1cnJlbnRSZXF1ZXN0ID0gcmVxdWVzdCAhPT0gbnVsbCAmJiByZXF1ZXN0ICE9PSB2b2lkIDAgPyByZXF1ZXN0IDogKGF3YWl0ICgoX2EgPSBhZ2VudC5jcmVhdGVSZWFkU3RhdGVSZXF1ZXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChhZ2VudCwgeyBwYXRoczogW3BhdGhdIH0pKSk7XG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBhZ2VudC5yZWFkU3RhdGUoY2FuaXN0ZXJJZCwgeyBwYXRoczogW3BhdGhdIH0sIHVuZGVmaW5lZCwgY3VycmVudFJlcXVlc3QpO1xuICAgIGlmIChhZ2VudC5yb290S2V5ID09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQWdlbnQgcm9vdCBrZXkgbm90IGluaXRpYWxpemVkIGJlZm9yZSBwb2xsaW5nJyk7XG4gICAgY29uc3QgY2VydCA9IGF3YWl0IENlcnRpZmljYXRlLmNyZWF0ZSh7XG4gICAgICAgIGNlcnRpZmljYXRlOiBzdGF0ZS5jZXJ0aWZpY2F0ZSxcbiAgICAgICAgcm9vdEtleTogYWdlbnQucm9vdEtleSxcbiAgICAgICAgY2FuaXN0ZXJJZDogY2FuaXN0ZXJJZCxcbiAgICAgICAgYmxzVmVyaWZ5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1heWJlQnVmID0gbG9va3VwUmVzdWx0VG9CdWZmZXIoY2VydC5sb29rdXAoWy4uLnBhdGgsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnc3RhdHVzJyldKSk7XG4gICAgbGV0IHN0YXR1cztcbiAgICBpZiAodHlwZW9mIG1heWJlQnVmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBNaXNzaW5nIHJlcXVlc3RJZCBtZWFucyB3ZSBuZWVkIHRvIHdhaXRcbiAgICAgICAgc3RhdHVzID0gUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlVua25vd247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobWF5YmVCdWYpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgICBjYXNlIFJlcXVlc3RTdGF0dXNSZXNwb25zZVN0YXR1cy5SZXBsaWVkOiB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwUmVzdWx0VG9CdWZmZXIoY2VydC5sb29rdXAoWy4uLnBhdGgsICdyZXBseSddKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXMuUmVjZWl2ZWQ6XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlVua25vd246XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlByb2Nlc3Npbmc6XG4gICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBwb2xsaW5nIHN0cmF0ZWd5LCB0aGVuIHJldHJ5LlxuICAgICAgICAgICAgYXdhaXQgc3RyYXRlZ3koY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdGF0dXMpO1xuICAgICAgICAgICAgcmV0dXJuIHBvbGxGb3JSZXNwb25zZShhZ2VudCwgY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdHJhdGVneSwgY3VycmVudFJlcXVlc3QpO1xuICAgICAgICBjYXNlIFJlcXVlc3RTdGF0dXNSZXNwb25zZVN0YXR1cy5SZWplY3RlZDoge1xuICAgICAgICAgICAgY29uc3QgcmVqZWN0Q29kZSA9IG5ldyBVaW50OEFycmF5KGxvb2t1cFJlc3VsdFRvQnVmZmVyKGNlcnQubG9va3VwKFsuLi5wYXRoLCAncmVqZWN0X2NvZGUnXSkpKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHJlamVjdE1lc3NhZ2UgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobG9va3VwUmVzdWx0VG9CdWZmZXIoY2VydC5sb29rdXAoWy4uLnBhdGgsICdyZWplY3RfbWVzc2FnZSddKSkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYWxsIHdhcyByZWplY3RlZDpcXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZXF1ZXN0IElEOiAke3RvSGV4KHJlcXVlc3RJZCl9XFxuYCArXG4gICAgICAgICAgICAgICAgYCAgUmVqZWN0IGNvZGU6ICR7cmVqZWN0Q29kZX1cXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZWplY3QgdGV4dDogJHtyZWplY3RNZXNzYWdlfVxcbmApO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLkRvbmU6XG4gICAgICAgICAgICAvLyBUaGlzIGlzIF90ZWNobmljYWxseV8gbm90IGFuIGVycm9yLCBidXQgd2Ugc3RpbGwgZGlkbid0IHNlZSB0aGUgYFJlcGxpZWRgIHN0YXR1cyBzb1xuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyB0aGUgcmVzdWx0IGFuZCBjYW5ub3QgZGVjb2RlIGl0LlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYWxsIHdhcyBtYXJrZWQgYXMgZG9uZSBidXQgd2UgbmV2ZXIgc2F3IHRoZSByZXBseTpcXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZXF1ZXN0IElEOiAke3RvSGV4KHJlcXVlc3RJZCl9XFxuYCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/agent/lib/esm/polling/index.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/auth-client/lib/esm/db.js":
/*!*********************************************************!*\
  !*** ./node_modules/@dfinity/auth-client/lib/esm/db.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdbKeyVal: function() { return /* binding */ IdbKeyVal; }\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"./node_modules/idb/build/index.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ \"./node_modules/@dfinity/auth-client/lib/esm/storage.js\");\n\n\nconst AUTH_DB_NAME = 'auth-client-db';\nconst OBJECT_STORE_NAME = 'ic-keyval';\nconst _openDbStore = async (dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version) => {\n    // Clear legacy stored delegations\n    if (_storage__WEBPACK_IMPORTED_MODULE_1__.isBrowser && (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_DELEGATION))) {\n        localStorage.removeItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_DELEGATION);\n        localStorage.removeItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_KEY);\n    }\n    return await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(dbName, version, {\n        upgrade: database => {\n            database.objectStoreNames;\n            if (database.objectStoreNames.contains(storeName)) {\n                database.clear(storeName);\n            }\n            database.createObjectStore(storeName);\n        },\n    });\n};\nasync function _getValue(db, storeName, key) {\n    return await db.get(storeName, key);\n}\nasync function _setValue(db, storeName, key, value) {\n    return await db.put(storeName, value, key);\n}\nasync function _removeValue(db, storeName, key) {\n    return await db.delete(storeName, key);\n}\n/**\n * Simple Key Value store\n * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`\n */\nclass IdbKeyVal {\n    // Do not use - instead prefer create\n    constructor(_db, _storeName) {\n        this._db = _db;\n        this._storeName = _storeName;\n    }\n    /**\n     * @param {DBCreateOptions} options - DBCreateOptions\n     * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database\n     * @default\n     * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store\n     * @default\n     * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade\n     * @constructs an {@link IdbKeyVal}\n     */\n    static async create(options) {\n        const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = _storage__WEBPACK_IMPORTED_MODULE_1__.DB_VERSION } = options !== null && options !== void 0 ? options : {};\n        const db = await _openDbStore(dbName, storeName, version);\n        return new IdbKeyVal(db, storeName);\n    }\n    /**\n     * Basic setter\n     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n     * @param value value to set\n     * @returns void\n     */\n    async set(key, value) {\n        return await _setValue(this._db, this._storeName, key, value);\n    }\n    /**\n     * Basic getter\n     * Pass in a type T for type safety if you know the type the value will have if it is found\n     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n     * @returns `Promise<T | null>`\n     * @example\n     * await get<string>('exampleKey') -> 'exampleValue'\n     */\n    async get(key) {\n        var _a;\n        return (_a = (await _getValue(this._db, this._storeName, key))) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Remove a key\n     * @param key {@link IDBValidKey}\n     * @returns void\n     */\n    async remove(key) {\n        return await _removeValue(this._db, this._storeName, key);\n    }\n}\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYXV0aC1jbGllbnQvbGliL2VzbS9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkI7QUFDOEQ7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtDQUFTLHNGQUFzRiw0REFBc0I7QUFDN0gsZ0NBQWdDLDREQUFzQjtBQUN0RCxnQ0FBZ0MscURBQWU7QUFDL0M7QUFDQSxpQkFBaUIsMkNBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLDJCQUEyQjtBQUMxQztBQUNBLGVBQWUsOEJBQThCO0FBQzdDO0FBQ0EsZUFBZSw0QkFBNEI7QUFDM0MsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxnQkFBZ0IsZ0VBQWdFLGdEQUFVLEdBQUc7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2F1dGgtY2xpZW50L2xpYi9lc20vZGIuanM/NTc3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuaW1wb3J0IHsgREJfVkVSU0lPTiwgaXNCcm93c2VyLCBLRVlfU1RPUkFHRV9ERUxFR0FUSU9OLCBLRVlfU1RPUkFHRV9LRVkgfSBmcm9tICcuL3N0b3JhZ2UnO1xuY29uc3QgQVVUSF9EQl9OQU1FID0gJ2F1dGgtY2xpZW50LWRiJztcbmNvbnN0IE9CSkVDVF9TVE9SRV9OQU1FID0gJ2ljLWtleXZhbCc7XG5jb25zdCBfb3BlbkRiU3RvcmUgPSBhc3luYyAoZGJOYW1lID0gQVVUSF9EQl9OQU1FLCBzdG9yZU5hbWUgPSBPQkpFQ1RfU1RPUkVfTkFNRSwgdmVyc2lvbikgPT4ge1xuICAgIC8vIENsZWFyIGxlZ2FjeSBzdG9yZWQgZGVsZWdhdGlvbnNcbiAgICBpZiAoaXNCcm93c2VyICYmIChsb2NhbFN0b3JhZ2UgPT09IG51bGwgfHwgbG9jYWxTdG9yYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShLRVlfU1RPUkFHRV9ERUxFR0FUSU9OKSkpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oS0VZX1NUT1JBR0VfREVMRUdBVElPTik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKEtFWV9TVE9SQUdFX0tFWSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBvcGVuREIoZGJOYW1lLCB2ZXJzaW9uLCB7XG4gICAgICAgIHVwZ3JhZGU6IGRhdGFiYXNlID0+IHtcbiAgICAgICAgICAgIGRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXM7XG4gICAgICAgICAgICBpZiAoZGF0YWJhc2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZGF0YWJhc2UuY2xlYXIoc3RvcmVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuYXN5bmMgZnVuY3Rpb24gX2dldFZhbHVlKGRiLCBzdG9yZU5hbWUsIGtleSkge1xuICAgIHJldHVybiBhd2FpdCBkYi5nZXQoc3RvcmVOYW1lLCBrZXkpO1xufVxuYXN5bmMgZnVuY3Rpb24gX3NldFZhbHVlKGRiLCBzdG9yZU5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXdhaXQgZGIucHV0KHN0b3JlTmFtZSwgdmFsdWUsIGtleSk7XG59XG5hc3luYyBmdW5jdGlvbiBfcmVtb3ZlVmFsdWUoZGIsIHN0b3JlTmFtZSwga2V5KSB7XG4gICAgcmV0dXJuIGF3YWl0IGRiLmRlbGV0ZShzdG9yZU5hbWUsIGtleSk7XG59XG4vKipcbiAqIFNpbXBsZSBLZXkgVmFsdWUgc3RvcmVcbiAqIERlZmF1bHRzIHRvIGAnYXV0aC1jbGllbnQtZGInYCB3aXRoIGFuIG9iamVjdCBzdG9yZSBvZiBgJ2ljLWtleXZhbCdgXG4gKi9cbmV4cG9ydCBjbGFzcyBJZGJLZXlWYWwge1xuICAgIC8vIERvIG5vdCB1c2UgLSBpbnN0ZWFkIHByZWZlciBjcmVhdGVcbiAgICBjb25zdHJ1Y3RvcihfZGIsIF9zdG9yZU5hbWUpIHtcbiAgICAgICAgdGhpcy5fZGIgPSBfZGI7XG4gICAgICAgIHRoaXMuX3N0b3JlTmFtZSA9IF9zdG9yZU5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7REJDcmVhdGVPcHRpb25zfSBvcHRpb25zIC0gREJDcmVhdGVPcHRpb25zXG4gICAgICogQHBhcmFtIHtEQkNyZWF0ZU9wdGlvbnNbJ2RiTmFtZSddfSBvcHRpb25zLmRiTmFtZSBuYW1lIGZvciB0aGUgaW5kZXhlZGRiIGRhdGFiYXNlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiBAcGFyYW0ge0RCQ3JlYXRlT3B0aW9uc1snc3RvcmVOYW1lJ119IG9wdGlvbnMuc3RvcmVOYW1lIG5hbWUgZm9yIHRoZSBpbmRleGVkZGIgRGF0YSBTdG9yZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICogQHBhcmFtIHtEQkNyZWF0ZU9wdGlvbnNbJ3ZlcnNpb24nXX0gb3B0aW9ucy52ZXJzaW9uIHZlcnNpb24gb2YgdGhlIGRhdGFiYXNlLiBJbmNyZW1lbnQgdG8gc2FmZWx5IHVwZ3JhZGVcbiAgICAgKiBAY29uc3RydWN0cyBhbiB7QGxpbmsgSWRiS2V5VmFsfVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGUob3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGRiTmFtZSA9IEFVVEhfREJfTkFNRSwgc3RvcmVOYW1lID0gT0JKRUNUX1NUT1JFX05BTUUsIHZlcnNpb24gPSBEQl9WRVJTSU9OIH0gPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fTtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBfb3BlbkRiU3RvcmUoZGJOYW1lLCBzdG9yZU5hbWUsIHZlcnNpb24pO1xuICAgICAgICByZXR1cm4gbmV3IElkYktleVZhbChkYiwgc3RvcmVOYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmFzaWMgc2V0dGVyXG4gICAgICogQHBhcmFtIHtJREJWYWxpZEtleX0ga2V5IHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBCdWZmZXJTb3VyY2UgfCBJREJWYWxpZEtleVtdXG4gICAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBhc3luYyBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgX3NldFZhbHVlKHRoaXMuX2RiLCB0aGlzLl9zdG9yZU5hbWUsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCYXNpYyBnZXR0ZXJcbiAgICAgKiBQYXNzIGluIGEgdHlwZSBUIGZvciB0eXBlIHNhZmV0eSBpZiB5b3Uga25vdyB0aGUgdHlwZSB0aGUgdmFsdWUgd2lsbCBoYXZlIGlmIGl0IGlzIGZvdW5kXG4gICAgICogQHBhcmFtIHtJREJWYWxpZEtleX0ga2V5IHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBCdWZmZXJTb3VyY2UgfCBJREJWYWxpZEtleVtdXG4gICAgICogQHJldHVybnMgYFByb21pc2U8VCB8IG51bGw+YFxuICAgICAqIEBleGFtcGxlXG4gICAgICogYXdhaXQgZ2V0PHN0cmluZz4oJ2V4YW1wbGVLZXknKSAtPiAnZXhhbXBsZVZhbHVlJ1xuICAgICAqL1xuICAgIGFzeW5jIGdldChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gKGF3YWl0IF9nZXRWYWx1ZSh0aGlzLl9kYiwgdGhpcy5fc3RvcmVOYW1lLCBrZXkpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEga2V5XG4gICAgICogQHBhcmFtIGtleSB7QGxpbmsgSURCVmFsaWRLZXl9XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IF9yZW1vdmVWYWx1ZSh0aGlzLl9kYiwgdGhpcy5fc3RvcmVOYW1lLCBrZXkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/auth-client/lib/esm/db.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/auth-client/lib/esm/idleManager.js":
/*!******************************************************************!*\
  !*** ./node_modules/@dfinity/auth-client/lib/esm/idleManager.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdleManager: function() { return /* binding */ IdleManager; }\n/* harmony export */ });\nconst events = ['mousedown', 'mousemove', 'keydown', 'touchstart', 'wheel'];\n/**\n * Detects if the user has been idle for a duration of `idleTimeout` ms, and calls `onIdle` and registered callbacks.\n * By default, the IdleManager will log a user out after 10 minutes of inactivity.\n * To override these defaults, you can pass an `onIdle` callback, or configure a custom `idleTimeout` in milliseconds\n */\nclass IdleManager {\n    /**\n     * @protected\n     * @param options {@link IdleManagerOptions}\n     */\n    constructor(options = {}) {\n        var _a;\n        this.callbacks = [];\n        this.idleTimeout = 10 * 60 * 1000;\n        this.timeoutID = undefined;\n        const { onIdle, idleTimeout = 10 * 60 * 1000 } = options || {};\n        this.callbacks = onIdle ? [onIdle] : [];\n        this.idleTimeout = idleTimeout;\n        const _resetTimer = this._resetTimer.bind(this);\n        window.addEventListener('load', _resetTimer, true);\n        events.forEach(function (name) {\n            document.addEventListener(name, _resetTimer, true);\n        });\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const debounce = (func, wait) => {\n            let timeout;\n            return (...args) => {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                const context = this;\n                const later = function () {\n                    timeout = undefined;\n                    func.apply(context, args);\n                };\n                clearTimeout(timeout);\n                timeout = window.setTimeout(later, wait);\n            };\n        };\n        if (options === null || options === void 0 ? void 0 : options.captureScroll) {\n            // debounce scroll events\n            const scroll = debounce(_resetTimer, (_a = options === null || options === void 0 ? void 0 : options.scrollDebounce) !== null && _a !== void 0 ? _a : 100);\n            window.addEventListener('scroll', scroll, true);\n        }\n        _resetTimer();\n    }\n    /**\n     * Creates an {@link IdleManager}\n     * @param {IdleManagerOptions} options Optional configuration\n     * @see {@link IdleManagerOptions}\n     * @param options.onIdle Callback once user has been idle. Use to prompt for fresh login, and use `Actor.agentOf(your_actor).invalidateIdentity()` to protect the user\n     * @param options.idleTimeout timeout in ms\n     * @param options.captureScroll capture scroll events\n     * @param options.scrollDebounce scroll debounce time in ms\n     */\n    static create(options = {}) {\n        return new this(options);\n    }\n    /**\n     * @param {IdleCB} callback function to be called when user goes idle\n     */\n    registerCallback(callback) {\n        this.callbacks.push(callback);\n    }\n    /**\n     * Cleans up the idle manager and its listeners\n     */\n    exit() {\n        clearTimeout(this.timeoutID);\n        window.removeEventListener('load', this._resetTimer, true);\n        const _resetTimer = this._resetTimer.bind(this);\n        events.forEach(function (name) {\n            document.removeEventListener(name, _resetTimer, true);\n        });\n        this.callbacks.forEach(cb => cb());\n    }\n    /**\n     * Resets the timeouts during cleanup\n     */\n    _resetTimer() {\n        const exit = this.exit.bind(this);\n        window.clearTimeout(this.timeoutID);\n        this.timeoutID = window.setTimeout(exit, this.idleTimeout);\n    }\n}\n//# sourceMappingURL=idleManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYXV0aC1jbGllbnQvbGliL2VzbS9pZGxlTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVDQUF1QztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsZUFBZSxvQkFBb0I7QUFDbkMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYXV0aC1jbGllbnQvbGliL2VzbS9pZGxlTWFuYWdlci5qcz9iMGExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV2ZW50cyA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdrZXlkb3duJywgJ3RvdWNoc3RhcnQnLCAnd2hlZWwnXTtcbi8qKlxuICogRGV0ZWN0cyBpZiB0aGUgdXNlciBoYXMgYmVlbiBpZGxlIGZvciBhIGR1cmF0aW9uIG9mIGBpZGxlVGltZW91dGAgbXMsIGFuZCBjYWxscyBgb25JZGxlYCBhbmQgcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gKiBCeSBkZWZhdWx0LCB0aGUgSWRsZU1hbmFnZXIgd2lsbCBsb2cgYSB1c2VyIG91dCBhZnRlciAxMCBtaW51dGVzIG9mIGluYWN0aXZpdHkuXG4gKiBUbyBvdmVycmlkZSB0aGVzZSBkZWZhdWx0cywgeW91IGNhbiBwYXNzIGFuIGBvbklkbGVgIGNhbGxiYWNrLCBvciBjb25maWd1cmUgYSBjdXN0b20gYGlkbGVUaW1lb3V0YCBpbiBtaWxsaXNlY29uZHNcbiAqL1xuZXhwb3J0IGNsYXNzIElkbGVNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIG9wdGlvbnMge0BsaW5rIElkbGVNYW5hZ2VyT3B0aW9uc31cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmlkbGVUaW1lb3V0ID0gMTAgKiA2MCAqIDEwMDA7XG4gICAgICAgIHRoaXMudGltZW91dElEID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB7IG9uSWRsZSwgaWRsZVRpbWVvdXQgPSAxMCAqIDYwICogMTAwMCB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBvbklkbGUgPyBbb25JZGxlXSA6IFtdO1xuICAgICAgICB0aGlzLmlkbGVUaW1lb3V0ID0gaWRsZVRpbWVvdXQ7XG4gICAgICAgIGNvbnN0IF9yZXNldFRpbWVyID0gdGhpcy5fcmVzZXRUaW1lci5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIF9yZXNldFRpbWVyLCB0cnVlKTtcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgX3Jlc2V0VGltZXIsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgICAgICAgY29uc3QgZGVib3VuY2UgPSAoZnVuYywgd2FpdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0dXJlU2Nyb2xsKSB7XG4gICAgICAgICAgICAvLyBkZWJvdW5jZSBzY3JvbGwgZXZlbnRzXG4gICAgICAgICAgICBjb25zdCBzY3JvbGwgPSBkZWJvdW5jZShfcmVzZXRUaW1lciwgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNjcm9sbERlYm91bmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxMDApO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3Jlc2V0VGltZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiB7QGxpbmsgSWRsZU1hbmFnZXJ9XG4gICAgICogQHBhcmFtIHtJZGxlTWFuYWdlck9wdGlvbnN9IG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvblxuICAgICAqIEBzZWUge0BsaW5rIElkbGVNYW5hZ2VyT3B0aW9uc31cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vbklkbGUgQ2FsbGJhY2sgb25jZSB1c2VyIGhhcyBiZWVuIGlkbGUuIFVzZSB0byBwcm9tcHQgZm9yIGZyZXNoIGxvZ2luLCBhbmQgdXNlIGBBY3Rvci5hZ2VudE9mKHlvdXJfYWN0b3IpLmludmFsaWRhdGVJZGVudGl0eSgpYCB0byBwcm90ZWN0IHRoZSB1c2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaWRsZVRpbWVvdXQgdGltZW91dCBpbiBtc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmNhcHR1cmVTY3JvbGwgY2FwdHVyZSBzY3JvbGwgZXZlbnRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2Nyb2xsRGVib3VuY2Ugc2Nyb2xsIGRlYm91bmNlIHRpbWUgaW4gbXNcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SWRsZUNCfSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1c2VyIGdvZXMgaWRsZVxuICAgICAqL1xuICAgIHJlZ2lzdGVyQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCB0aGUgaWRsZSBtYW5hZ2VyIGFuZCBpdHMgbGlzdGVuZXJzXG4gICAgICovXG4gICAgZXhpdCgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElEKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLl9yZXNldFRpbWVyLCB0cnVlKTtcbiAgICAgICAgY29uc3QgX3Jlc2V0VGltZXIgPSB0aGlzLl9yZXNldFRpbWVyLmJpbmQodGhpcyk7XG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIF9yZXNldFRpbWVyLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goY2IgPT4gY2IoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgdGltZW91dHMgZHVyaW5nIGNsZWFudXBcbiAgICAgKi9cbiAgICBfcmVzZXRUaW1lcigpIHtcbiAgICAgICAgY29uc3QgZXhpdCA9IHRoaXMuZXhpdC5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElEKTtcbiAgICAgICAgdGhpcy50aW1lb3V0SUQgPSB3aW5kb3cuc2V0VGltZW91dChleGl0LCB0aGlzLmlkbGVUaW1lb3V0KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGxlTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/auth-client/lib/esm/idleManager.js\n"));

/***/ }),

/***/ "./node_modules/@dfinity/auth-client/lib/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/auth-client/lib/esm/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthClient: function() { return /* binding */ AuthClient; },\n/* harmony export */   ERROR_USER_INTERRUPT: function() { return /* binding */ ERROR_USER_INTERRUPT; },\n/* harmony export */   IdbKeyVal: function() { return /* reexport safe */ _db__WEBPACK_IMPORTED_MODULE_4__.IdbKeyVal; },\n/* harmony export */   IdbStorage: function() { return /* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.IdbStorage; },\n/* harmony export */   KEY_STORAGE_DELEGATION: function() { return /* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION; },\n/* harmony export */   KEY_STORAGE_KEY: function() { return /* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY; },\n/* harmony export */   LocalStorage: function() { return /* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.LocalStorage; }\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"./node_modules/@dfinity/agent/lib/esm/index.js\");\n/* harmony import */ var _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/identity */ \"./node_modules/@dfinity/identity/lib/esm/index.js\");\n/* harmony import */ var _idleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idleManager */ \"./node_modules/@dfinity/auth-client/lib/esm/idleManager.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ \"./node_modules/@dfinity/auth-client/lib/esm/storage.js\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db */ \"./node_modules/@dfinity/auth-client/lib/esm/db.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _idleManager__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"IdbStorage\",\"LocalStorage\",\"KEY_STORAGE_DELEGATION\",\"KEY_STORAGE_KEY\",\"IdbKeyVal\",\"ERROR_USER_INTERRUPT\",\"AuthClient\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _idleManager__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/** @module AuthClient */\n\n\n\n\n\n\nconst IDENTITY_PROVIDER_DEFAULT = 'https://identity.ic0.app';\nconst IDENTITY_PROVIDER_ENDPOINT = '#authorize';\nconst ECDSA_KEY_LABEL = 'ECDSA';\nconst ED25519_KEY_LABEL = 'Ed25519';\nconst INTERRUPT_CHECK_INTERVAL = 500;\nconst ERROR_USER_INTERRUPT = 'UserInterrupt';\n\n/**\n * Tool to manage authentication and identity\n * @see {@link AuthClient}\n */\nclass AuthClient {\n    constructor(_identity, _key, _chain, _storage, idleManager, _createOptions, \n    // A handle on the IdP window.\n    _idpWindow, \n    // The event handler for processing events from the IdP.\n    _eventHandler) {\n        this._identity = _identity;\n        this._key = _key;\n        this._chain = _chain;\n        this._storage = _storage;\n        this.idleManager = idleManager;\n        this._createOptions = _createOptions;\n        this._idpWindow = _idpWindow;\n        this._eventHandler = _eventHandler;\n        this._registerDefaultIdleCallback();\n    }\n    /**\n     * Create an AuthClient to manage authentication and identity\n     * @constructs\n     * @param {AuthClientCreateOptions} options - Options for creating an {@link AuthClient}\n     * @see {@link AuthClientCreateOptions}\n     * @param options.identity Optional Identity to use as the base\n     * @see {@link SignIdentity}\n     * @param options.storage Storage mechanism for delegration credentials\n     * @see {@link AuthClientStorage}\n     * @param options.keyType Type of key to use for the base key\n     * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}\n     * @see {@link IdleOptions}\n     * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.\n     * @example\n     * const authClient = await AuthClient.create({\n     *   idleOptions: {\n     *     disableIdle: true\n     *   }\n     * })\n     */\n    static async create(options = {}) {\n        var _a, _b, _c;\n        const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new _storage__WEBPACK_IMPORTED_MODULE_3__.IdbStorage();\n        const keyType = (_b = options.keyType) !== null && _b !== void 0 ? _b : ECDSA_KEY_LABEL;\n        let key = null;\n        if (options.identity) {\n            key = options.identity;\n        }\n        else {\n            let maybeIdentityStorage = await storage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n            if (!maybeIdentityStorage && _storage__WEBPACK_IMPORTED_MODULE_3__.isBrowser) {\n                // Attempt to migrate from localstorage\n                try {\n                    const fallbackLocalStorage = new _storage__WEBPACK_IMPORTED_MODULE_3__.LocalStorage();\n                    const localChain = await fallbackLocalStorage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                    const localKey = await fallbackLocalStorage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n                    // not relevant for Ed25519\n                    if (localChain && localKey && keyType === ECDSA_KEY_LABEL) {\n                        console.log('Discovered an identity stored in localstorage. Migrating to IndexedDB');\n                        await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION, localChain);\n                        await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, localKey);\n                        maybeIdentityStorage = localChain;\n                        // clean up\n                        await fallbackLocalStorage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                        await fallbackLocalStorage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n                    }\n                }\n                catch (error) {\n                    console.error('error while attempting to recover localstorage: ' + error);\n                }\n            }\n            if (maybeIdentityStorage) {\n                try {\n                    if (typeof maybeIdentityStorage === 'object') {\n                        if (keyType === ED25519_KEY_LABEL && typeof maybeIdentityStorage === 'string') {\n                            key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);\n                        }\n                        else {\n                            key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.ECDSAKeyIdentity.fromKeyPair(maybeIdentityStorage);\n                        }\n                    }\n                    else if (typeof maybeIdentityStorage === 'string') {\n                        // This is a legacy identity, which is a serialized Ed25519KeyIdentity.\n                        key = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);\n                    }\n                }\n                catch (e) {\n                    // Ignore this, this means that the localStorage value isn't a valid Ed25519KeyIdentity or ECDSAKeyIdentity\n                    // serialization.\n                }\n            }\n        }\n        let identity = new _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.AnonymousIdentity();\n        let chain = null;\n        if (key) {\n            try {\n                const chainStorage = await storage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                if (typeof chainStorage === 'object' && chainStorage !== null) {\n                    throw new Error('Delegation chain is incorrectly stored. A delegation chain should be stored as a string.');\n                }\n                if (options.identity) {\n                    identity = options.identity;\n                }\n                else if (chainStorage) {\n                    chain = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationChain.fromJSON(chainStorage);\n                    // Verify that the delegation isn't expired.\n                    if (!(0,_dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.isDelegationValid)(chain)) {\n                        await _deleteStorage(storage);\n                        key = null;\n                    }\n                    else {\n                        // If the key is a public key, then we create a PartialDelegationIdentity.\n                        if ('toDer' in key) {\n                            identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.PartialDelegationIdentity.fromDelegation(key, chain);\n                            // otherwise, we create a DelegationIdentity.\n                        }\n                        else {\n                            identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationIdentity.fromDelegation(key, chain);\n                        }\n                    }\n                }\n            }\n            catch (e) {\n                console.error(e);\n                // If there was a problem loading the chain, delete the key.\n                await _deleteStorage(storage);\n                key = null;\n            }\n        }\n        let idleManager = undefined;\n        if ((_c = options.idleOptions) === null || _c === void 0 ? void 0 : _c.disableIdle) {\n            idleManager = undefined;\n        }\n        // if there is a delegation chain or provided identity, setup idleManager\n        else if (chain || options.identity) {\n            idleManager = _idleManager__WEBPACK_IMPORTED_MODULE_2__.IdleManager.create(options.idleOptions);\n        }\n        if (!key) {\n            // Create a new key (whether or not one was in storage).\n            if (keyType === ED25519_KEY_LABEL) {\n                key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.generate();\n                await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, JSON.stringify(key.toJSON()));\n            }\n            else {\n                if (options.storage && keyType === ECDSA_KEY_LABEL) {\n                    console.warn(`You are using a custom storage provider that may not support CryptoKey storage. If you are using a custom storage provider that does not support CryptoKey storage, you should use '${ED25519_KEY_LABEL}' as the key type, as it can serialize to a string`);\n                }\n                key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.ECDSAKeyIdentity.generate();\n                await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, key.getKeyPair());\n            }\n        }\n        return new this(identity, key, chain, storage, idleManager, options);\n    }\n    _registerDefaultIdleCallback() {\n        var _a, _b;\n        const idleOptions = (_a = this._createOptions) === null || _a === void 0 ? void 0 : _a.idleOptions;\n        /**\n         * Default behavior is to clear stored identity and reload the page.\n         * By either setting the disableDefaultIdleCallback flag or passing in a custom idle callback, we will ignore this config\n         */\n        if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {\n            (_b = this.idleManager) === null || _b === void 0 ? void 0 : _b.registerCallback(() => {\n                this.logout();\n                location.reload();\n            });\n        }\n    }\n    async _handleSuccess(message, onSuccess) {\n        var _a, _b;\n        const delegations = message.delegations.map(signedDelegation => {\n            return {\n                delegation: new _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Delegation(signedDelegation.delegation.pubkey, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),\n                signature: signedDelegation.signature.buffer,\n            };\n        });\n        const delegationChain = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationChain.fromDelegations(delegations, message.userPublicKey.buffer);\n        const key = this._key;\n        if (!key) {\n            return;\n        }\n        this._chain = delegationChain;\n        if ('toDer' in key) {\n            this._identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.PartialDelegationIdentity.fromDelegation(key, this._chain);\n        }\n        else {\n            this._identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationIdentity.fromDelegation(key, this._chain);\n        }\n        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();\n        const idleOptions = (_b = this._createOptions) === null || _b === void 0 ? void 0 : _b.idleOptions;\n        // create the idle manager on a successful login if we haven't disabled it\n        // and it doesn't already exist.\n        if (!this.idleManager && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableIdle)) {\n            this.idleManager = _idleManager__WEBPACK_IMPORTED_MODULE_2__.IdleManager.create(idleOptions);\n            this._registerDefaultIdleCallback();\n        }\n        this._removeEventListener();\n        delete this._idpWindow;\n        if (this._chain) {\n            await this._storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));\n        }\n        // onSuccess should be the last thing to do to avoid consumers\n        // interfering by navigating or refreshing the page\n        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(message);\n    }\n    getIdentity() {\n        return this._identity;\n    }\n    async isAuthenticated() {\n        return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;\n    }\n    /**\n     * AuthClient Login -\n     * Opens up a new window to authenticate with Internet Identity\n     * @param {AuthClientLoginOptions} options - Options for logging in\n     * @param options.identityProvider Identity provider\n     * @param options.maxTimeToLive Expiration of the authentication in nanoseconds\n     * @param options.allowPinAuthentication If present, indicates whether or not the Identity Provider should allow the user to authenticate and/or register using a temporary key/PIN identity. Authenticating dapps may want to prevent users from using Temporary keys/PIN identities because Temporary keys/PIN identities are less secure than Passkeys (webauthn credentials) and because Temporary keys/PIN identities generally only live in a browser database (which may get cleared by the browser/OS).\n     * @param options.derivationOrigin Origin for Identity Provider to use while generating the delegated identity\n     * @param options.windowOpenerFeatures Configures the opened authentication window\n     * @param options.onSuccess Callback once login has completed\n     * @param options.onError Callback in case authentication fails\n     * @example\n     * const authClient = await AuthClient.create();\n     * authClient.login({\n     *  identityProvider: 'http://<canisterID>.127.0.0.1:8000',\n     *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week\n     *  windowOpenerFeatures: \"toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100\",\n     *  onSuccess: () => {\n     *    console.log('Login Successful!');\n     *  },\n     *  onError: (error) => {\n     *    console.error('Login Failed: ', error);\n     *  }\n     * });\n     */\n    async login(options) {\n        var _a, _b, _c, _d;\n        // Set default maxTimeToLive to 8 hours\n        const defaultTimeToLive = /* hours */ BigInt(8) * /* nanoseconds */ BigInt(3600000000000);\n        // Create the URL of the IDP. (e.g. https://XXXX/#authorize)\n        const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);\n        // Set the correct hash if it isn't already set.\n        identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;\n        // If `login` has been called previously, then close/remove any previous windows\n        // and event listeners.\n        (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();\n        this._removeEventListener();\n        // Add an event listener to handle responses.\n        this._eventHandler = this._getEventHandler(identityProviderUrl, Object.assign({ maxTimeToLive: (_c = options === null || options === void 0 ? void 0 : options.maxTimeToLive) !== null && _c !== void 0 ? _c : defaultTimeToLive }, options));\n        window.addEventListener('message', this._eventHandler);\n        // Open a new window with the IDP provider.\n        this._idpWindow =\n            (_d = window.open(identityProviderUrl.toString(), 'idpWindow', options === null || options === void 0 ? void 0 : options.windowOpenerFeatures)) !== null && _d !== void 0 ? _d : undefined;\n        // Check if the _idpWindow is closed by user.\n        const checkInterruption = () => {\n            // The _idpWindow is opened and not yet closed by the client\n            if (this._idpWindow) {\n                if (this._idpWindow.closed) {\n                    this._handleFailure(ERROR_USER_INTERRUPT, options === null || options === void 0 ? void 0 : options.onError);\n                }\n                else {\n                    setTimeout(checkInterruption, INTERRUPT_CHECK_INTERVAL);\n                }\n            }\n        };\n        checkInterruption();\n    }\n    _getEventHandler(identityProviderUrl, options) {\n        return async (event) => {\n            var _a, _b, _c;\n            if (event.origin !== identityProviderUrl.origin) {\n                console.warn(`WARNING: expected origin '${identityProviderUrl.origin}', got '${event.origin}' (ignoring)`);\n                return;\n            }\n            const message = event.data;\n            switch (message.kind) {\n                case 'authorize-ready': {\n                    // IDP is ready. Send a message to request authorization.\n                    const request = Object.assign({ kind: 'authorize-client', sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()), maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive, allowPinAuthentication: options === null || options === void 0 ? void 0 : options.allowPinAuthentication, derivationOrigin: (_b = options === null || options === void 0 ? void 0 : options.derivationOrigin) === null || _b === void 0 ? void 0 : _b.toString() }, options === null || options === void 0 ? void 0 : options.customValues);\n                    (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);\n                    break;\n                }\n                case 'authorize-client-success':\n                    // Create the delegation chain and store it.\n                    try {\n                        await this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess);\n                    }\n                    catch (err) {\n                        this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);\n                    }\n                    break;\n                case 'authorize-client-failure':\n                    this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError);\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n    _handleFailure(errorMessage, onError) {\n        var _a;\n        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();\n        onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n        this._removeEventListener();\n        delete this._idpWindow;\n    }\n    _removeEventListener() {\n        if (this._eventHandler) {\n            window.removeEventListener('message', this._eventHandler);\n        }\n        this._eventHandler = undefined;\n    }\n    async logout(options = {}) {\n        await _deleteStorage(this._storage);\n        // Reset this auth client to a non-authenticated state.\n        this._identity = new _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.AnonymousIdentity();\n        this._chain = null;\n        if (options.returnTo) {\n            try {\n                window.history.pushState({}, '', options.returnTo);\n            }\n            catch (e) {\n                window.location.href = options.returnTo;\n            }\n        }\n    }\n}\nasync function _deleteStorage(storage) {\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_VECTOR);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@dfinity/auth-client/lib/esm/index.js\n"));

/***/ })

});